Turbo Assembler	 Version 4.1	    02/23/25 13:55:33	    Page 1
regframe.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;				     Second Task
      3				     ;			      Frame with info about registers
      4				     ;				  "Resident Frame"
      5				     ;			       (c) 2025	Muratov	Artyom
      6				     ;------------------------------------------------------------------------------
      7
      8	0000			     .model tiny
      9	0000			     .code
     10				     org 100h
     11
     12	0100			     Start:
     13				     include frame.asm
1    14				     ;------------------------------------------------------------------------------
1    15				     ;				   Frame functions
1    16				     ;------------------------------------------------------------------------------
1    17
1    18				     ;------------------------------------------------------------------------------
1    19				     ; MakeFrame     Func to make frame
1    20				     ; Entry:	     ah	    - color of frame
1    21				     ;		     si	    - ptr   of array of	the symbols for	frame
1    22				     ;		     cx	    - len   of frame
1    23				     ;		     dx	    - high  of frame
1    24				     ;		     di	    - start of print (upper left cornel)
1    25				     ; Exit:	     None
1    26				     ; Destroy:	     ax, si, cx, dx, di, es
1    27				     ;------------------------------------------------------------------------------
1    28	0100			     MakeFrame	     proc
1    29	0100  57				     push di			     ; save start of print in stack
1    30	0101  BF B800				     mov  di, 0b800h		     ; VIDEOSEG
1    31	0104  8E C7				     mov  es, di		     ; es = videoseg
1    32	0106  5F				     pop  di			     ; back start of print
1    33
1    34	0107  51				     push cx			     ; save cx in stack
1    35	0108  E8 001D				     call MakeStrFrame		     ; make first string of frame
1    36	010B  59				     pop  cx			     ; pop cx from stack
1    37	010C  83 EA 02				     sub  dx, 2			     ; dx -= 2;	dx = number
1    38										     ; of middle strings
1    39	010F			     MakeMiddle:
1    40	010F  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
1    41	0113  51				     push cx			     ; save cx
1    42	0114  56				     push si			     ; save si
1    43	0115  E8 0010				     call MakeStrFrame		     ; make middle string
1    44	0118  5E				     pop si			     ; si = &(start symbol of
1    45										     ; middle strings)
1    46	0119  59				     pop  cx			     ; cx = len	of frame
1    47	011A  4A				     dec  dx			     ; dx--;
1    48	011B  75 F2				     jne  MakeMiddle		     ; loop
1    49
1    50	011D  83 C6 03				     add  si, 3			     ; si = &(start symbol of
1    51										     ; end string)
1    52	0120  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
1    53
1    54	0124  E8 0001				     call MakeStrFrame		     ; make end	string of frame
1    55
1    56	0127  C3				     ret
1    57	0128			     MakeFrame	     endp
Turbo Assembler	 Version 4.1	    02/23/25 13:55:33	    Page 2
regframe.asm



1    58
1    59				     ;------------------------------------------------------------------------------
1    60				     ; MakeStrFrame  Func to make string of frame
1    61				     ; Entry:	     ah	    - color of string
1    62				     ;		     si	    - array of symbol for string
1    63				     ;		     cx	    - len of string
1    64				     ;		     di	    - start of print string
1    65				     ;		     es	    - videoseg
1    66				     ; Exit:	     None
1    67				     ; Destroy:	     ax, cx, si
1    68				     ;------------------------------------------------------------------------------
1    69	0128			     MakeStrFrame    proc
1    70	0128  57				     push di			     ; save di = start of string
1    71
1    72	0129  AC				     lodsb			     ; ax = first symbol of string
1    73										     ; mov al, ds:[si] && inc si
1    74	012A  AB				     stosw			     ; mov es:[di], ax && di +=	2
1    75
1    76	012B  AC				     lodsb			     ; ax = middle symbol of string
1    77										     ; mov al, ds:[si] && inc si
1    78	012C  83 E9 02				     sub  cx, 2			     ; cx -= 2;	cx = number
1    79										     ; of middle symbols
1    80	012F  F3> AB				     rep stosw			     ; mov es:[di], ax && di +=	2
1    81										     ; cx -= 1;	cx = 0?; make loop
1    82										     ; put all middle symbols
1    83	0131  AC				     lodsb			     ; ax = end	symbol of string
1    84										     ; mov al, ds:[si] && inc si
1    85	0132  AB				     stosw			     ; mov es:[di], ax && di +=	2
1    86	0133  5F				     pop  di			     ; back di = start of string
1    87
1    88	0134  C3				     ret
1    89	0135			     MakeStrFrame    endp
1    90
1    91				     ;------------------------------------------------------------------------------
1    92				     ;		   2D Array of frame's symbols
1    93				     ;	      1.1   1.2	  1.3	2.1   2.2   2.3	  3.1	3.2   3.3
1    94	0135  C9 CD BB BA 00 BA	C8+  Style db 0c9h, 0cdh, 0bbh,	0bah,  00h, 0bah, 0c8h,	0cdh, 0bch
     95	      CD BC
1    96	013E  03 03 03 03 00 03	03+	   db  03h,  03h,  03h,	 03h,  00h,  03h,  03h,	 03h,  03h
     97	      03 03
1    98	0147  DA C4 BF B3 00 B3	C0+	   db 0dah, 0c4h, 0bfh,	0b3h,  00h, 0b3h, 0c0h,	0c4h, 0d9h
     99	      C4 D9
1   100	0150  31 32 33 34 35 36	37+	   db "123456789"
    101	      38 39
1   102	0159  DC DC DC DD 00 DE	DF+	   db 0dch, 0dch, 0dch,	0ddh,  00h, 0deh, 0dfh,	0dfh, 0dfh
    103	      DF DF
1   104	0162  24 24 24 24 00 24	24+	   db 024h, 024h, 024h,	024h,  00h, 024h, 024h,	024h, 024h
    105	      24 24
1   106	016B  E0 E1 E7 E1 E0 E7	E7+	   db 0e0h, 0e1h, 0e7h,	0e1h, 0e0h, 0e7h, 0e7h,	0e1h, 0e0h
    107	      E1 E0
1   108	0174  00 00 00 00 00 00	00+	   db 00h,   00h,  00h,	 00h,  00h,  00h,  00h,	 00h,  00h
    109	      00 00
1   110
1   111				     ; 1.1 - start  symbol of first  string
1   112				     ; 1.2 - middle symbol of first  string
1   113				     ; 1.3 - end    symbol of first  string
1   114				     ; 2.1 - start  symbol of middle strings
Turbo Assembler	 Version 4.1	    02/23/25 13:55:33	    Page 3
regframe.asm



1   115				     ; 2.2 - middle symbol of middle strings
1   116				     ; 2.3 - end    symbol of middle strings
1   117				     ; 3.1 - start  symbol of end    string
1   118				     ; 3.2 - middle symbol of end    string
1   119				     ; 3.3 - end    symbol of end    string
1   120				     ;------------------------------------------------------------------------------
1   121
1   122
    123	017D  33 C0				     xor  ax, ax		     ; ax = 0
    124	017F  8E C0				     mov  es, ax		     ; es = ax
    125	0181  BB 0024				     mov  bx, 09h * 4		     ; offset for ptr to ISR_09h
    126
    127	0184  26: 8B 07				     mov  ax, es:[bx]		     ; Ofs_old_09h and Seg_old_09h
    128	0187  A3 01E5r				     mov  Ofs_old_09h, ax	     ; from array with
    129	018A  26: 8B 47	02			     mov  ax, es:[bx + 2]	     ; ptrs to interrupt service
    130	018E  A3 01E7r				     mov  Seg_old_09h, ax	     ; routine
    131
    132
    133	0191  CD 09				     int  09h			     ; call old	ISR 09h
    134
    135	0193  FA				     cli
    136	0194  26: C7 07	01B3r			     mov  es:[bx], offset MY_ISR_09h ; offset of my interrupt 09h
    137										     ; service routiny
    138	0199  0E				     push cs
    139	019A  58				     pop  ax			     ; ax = cs
    140	019B  26: 89 47	02			     mov  es:[bx + 2], ax	     ; es:[bx +	2] = ax	(= segment
    141										     ; with code)
    142	019F  FB				     sti
    143
    144	01A0  CD 09				     int  09h			     ; call old	ISR 09h
    145
    146	01A2  B8 3100				     mov  ax, 3100h		     ; DOS Fn 31H: Terminate & Stay
    147										     ; Resident
    148	01A5  BA 01EAr				     mov  dx, offset EOP	     ; dx = &EOP
    149	01A8  D1 EA D1 EA D1 EA	D1+		     shr  dx, 4			     ; dx /= 16
    150	      EA
    151	01B0  42				     inc  dx			     ; dx++
    152	01B1  CD 21				     int  21h
    153
    154				     ;------------------------------------------------------------------------------
    155				     ; MY_ISR_09h - new	handler	for interrupt 09h
    156				     ; Entry:	     None
    157				     ; Exit:	     None
    158				     ; Destroy:	     None
    159				     ;------------------------------------------------------------------------------
    160	01B3			     MY_ISR_09h	     proc
    161	01B3  50				     push ax			     ; save ax in stack
    162	01B4  51				     push cx			     ; save cx in stack
    163	01B5  52				     push dx			     ; save dx in stack
    164	01B6  56				     push si			     ; save si in stack
    165	01B7  57				     push di			     ; save di in stack
    166	01B8  06				     push es			     ; save es in stack
    167
    168	01B9  E4 60				     in	  al, 60h		     ; read data from PPI port
    169	01BB  3C 21				     cmp  al, 21h		     ; if (al != 'Press	F1'){
    170	01BD  75 14				     jne  NotPressF1		     ; goto NotPressF1 }
    171
Turbo Assembler	 Version 4.1	    02/23/25 13:55:33	    Page 4
regframe.asm



    172	01BF  B4 09				     mov  ah, 09h		     ;-----------------
    173	01C1  B9 000E				     mov  cx, 14		     ;		      |
    174	01C4  BA 0011				     mov  dx, 17		     ; attributes for |
    175	01C7  BE 0135r				     lea  si, Style		     ; frame	      |
    176	01CA  83 C6 12				     add  si, 9	* 2		     ;		      |
    177	01CD  BF 0084				     mov  di, (80 - 14)	* 2	     ;-----------------
    178	01D0  E8 FF2D				     call MakeFrame		     ; Make frame for registers
    179
    180						     ;jmp  NotReleaseF1:	      ;	goto NotReleaseF1:
    181
    182	01D3			     NotPressF1:
    183						     ;cmp  al, 3bh or 80h	      ;	if (al != 'Release F1'){
    184						     ;jne  NotReleaseF1:	      ;	goto NotReleaseF1: }
    185
    186						     ;mov  ah, 09h		      ;-----------------
    187						     ;mov  cx, 14		      ;		       |
    188						     ;mov  dx, 17		      ;	attributes for |
    189						     ;lea  si, Style		      ;	frame	       |
    190						     ;add  si, 9 * 7		      ;		       |
    191						     ;mov  di, (80 - 14) * 2	      ;-----------------
    192						     ;call MakeFrame		      ;	Make frame for registers
    193
    194	01D3			     NotReleaseF1:
    195	01D3  E4 61				     in	  al,  61h		     ; al = port 61h
    196	01D5  0C 80				     or	  al,  80h		     ; al |= 10000000b
    197	01D7  E6 61				     out  61h, al		     ; out to 61h PPI
    198	01D9  24 7F				     and  al, not 80h		     ; al &= 01111111b
    199	01DB  E6 61				     out  61h, al		     ; out to 61h PPI
    200	01DD  B0 20				     mov  al,  20h		     ; al = 20h
    201	01DF  E6 20				     out  20h, al		     ; out to interrupt	controller
    202
    203	01E1  07				     pop  es			     ; back es from stack
    204	01E2  5B				     pop  bx			     ; back bx from stack
    205	01E3  58				     pop  ax			     ; back ax from stack
    206
    207	01E4  EA				     db	  0eah			     ; jmp
    208	01E5  0000		     Ofs_old_09h     dw	  0			     ; offset
    209	01E7  0000		     Seg_old_09h     dw	  0			     ; segment
    210
    211	01E9  CF				     iret			     ; interrupt return
    212	01EA			     MY_ISR_09h	     endp
    213
    214	01EA			     EOP:
    215				     end	     Start
Turbo Assembler	 Version 4.1	    02/23/25 13:55:33	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/23/25"
??FILENAME			  Text	 "regframe"
??TIME				  Text	 "13:55:33"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGFRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
EOP				  Near	 DGROUP:01EA
MAKEFRAME			  Near	 DGROUP:0100
MAKEMIDDLE			  Near	 DGROUP:010F
MAKESTRFRAME			  Near	 DGROUP:0128
MY_ISR_09H			  Near	 DGROUP:01B3
NOTPRESSF1			  Near	 DGROUP:01D3
NOTRELEASEF1			  Near	 DGROUP:01D3
OFS_OLD_09H			  Word	 DGROUP:01E5
SEG_OLD_09H			  Word	 DGROUP:01E7
START				  Near	 DGROUP:0100
STYLE				  Byte	 DGROUP:0135

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  01EA Word	  Public  CODE
