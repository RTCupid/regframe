Turbo Assembler	 Version 4.1	    02/25/25 14:26:46	    Page 1
regframe.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;				     Second Task
      3				     ;			      Frame with info about registers
      4				     ;				  "Resident Frame"
      5				     ;			       (c) 2025	Muratov	Artyom
      6				     ;------------------------------------------------------------------------------
      7
      8	0000			     .model tiny
      9	0000			     .code
     10				     org 100h
     11
     12	0100			     Start:
     13				     ;---------------intercept-interrupt-09h----------------------------------------
     14	0100  33 C0				     xor  ax, ax		     ; ax = 0
     15	0102  8E C0				     mov  es, ax		     ; es = ax
     16	0104  BB 0024				     mov  bx, 09h * 4		     ; offset for ptr to ISR_09h
     17
     18	0107  26: 8B 07				     mov  ax, es:[bx]		     ; Ofs_old_09h and Seg_old_09h
     19	010A  A3 01B0r				     mov  Ofs_old_09h, ax	     ; from array with
     20	010D  26: 8B 47	02			     mov  ax, es:[bx + 2]	     ; ptrs to interrupt service
     21	0111  A3 01B2r				     mov  Seg_old_09h, ax	     ; routine
     22
     23	0114  CD 09				     int  09h			     ; call old	ISR 09h
     24
     25	0116  FA				     cli
     26	0117  26: C7 07	0157r			     mov  es:[bx], offset MY_ISR_09h ; offset of my interrupt 09h
     27										     ; service routiny
     28	011C  0E				     push cs
     29	011D  58				     pop  ax			     ; ax = cs
     30	011E  26: 89 47	02			     mov  es:[bx + 2], ax	     ; segment of my interrupt 08h
     31	0122  FB				     sti
     32
     33	0123  CD 09				     int  09h			     ; call old	ISR 09h
     34
     35				     ;---------------intercept-interrupt-08h----------------------------------------
     36
     37	0125  BB 0020				     mov  bx, 08h * 4		     ; offset for ptr to ISR_08h
     38
     39	0128  26: 8B 07				     mov  ax, es:[bx]		     ; Ofs_old_09h and Seg_old_09h
     40	012B  A3 01D4r				     mov  Ofs_old_08h, ax	     ; from array with
     41	012E  26: 8B 47	02			     mov  ax, es:[bx + 2]	     ; ptrs to interrupt service
     42	0132  A3 01D6r				     mov  Seg_old_08h, ax	     ; routine
     43
     44	0135  CD 08				     int  08h
     45
     46	0137  FA				     cli
     47	0138  26: C7 07	01BAr			     mov  es:[bx], offset MY_ISR_08h ; offset of my interrupt 08h
     48										     ; service routiny
     49	013D  0E				     push cs
     50	013E  58				     pop  ax			     ; ax = cs
     51	013F  26: 89 47	02			     mov  es:[bx + 2], ax	     ; segment of my interrupt 08h
     52	0143  FB				     sti
     53
     54	0144  CD 08				     int  08h
     55
     56				     ;---------------end-of-intercept-----------------------------------------------
     57
Turbo Assembler	 Version 4.1	    02/25/25 14:26:46	    Page 2
regframe.asm



     58	0146  B8 3100				     mov  ax, 3100h		     ; DOS Fn 31H: Terminate & Stay
     59										     ; Resident
     60	0149  BA 02DDr				     mov  dx, offset EOP	     ; dx = &EOP
     61	014C  D1 EA D1 EA D1 EA	D1+		     shr  dx, 4			     ; dx /= 16
     62	      EA
     63	0154  42				     inc  dx			     ; dx++
     64	0155  CD 21				     int  21h
     65
     66				     ;------------------------------------------------------------------------------
     67				     ; MY_ISR_09h - new	handler	for interrupt 09h
     68				     ; Entry:	     None
     69				     ; Exit:	     None
     70				     ; Destroy:	     None
     71				     ;------------------------------------------------------------------------------
     72	0157			     MY_ISR_09h	     proc
     73	0157  90				     nop
     74	0158  90				     nop
     75	0159  90				     nop
     76	015A  90				     nop
     77	015B  56				     push si			     ; save si in stack
     78	015C  57				     push di			     ; save di in stack
     79	015D  06				     push es			     ; save es in stack
     80	015E  1E				     push ds			     ; save ds in stack
     81	015F  52				     push dx			     ; save dx in stack
     82	0160  51				     push cx			     ; save cx in stack
     83	0161  53				     push bx			     ; save bx in stack
     84	0162  50				     push ax			     ; save ax in stack
     85
     86	0163  0E				     push cs
     87	0164  1F				     pop  ds			     ; ds = cs
     88
     89	0165  E4 60				     in	  al, 60h		     ; read data from PPI port
     90	0167  3C 21				     cmp  al, 21h		     ; if (al != 'Press	F'){
     91	0169  75 1A				     jne  NotPressF		    ; goto NotPressF }
     92
     93	016B  B4 09				     mov  ah, 09h		     ;-----------------
     94	016D  B9 000E				     mov  cx, 14		     ;		      |
     95	0170  BA 0011				     mov  dx, 17		     ; attributes for |
     96	0173  BE 0260r				     lea  si, Style		     ; frame	      |
     97	0176  83 C6 12				     add  si, 9	* 2		     ;		      |
     98	0179  BF 007C				     mov  di, (80 - 18)	* 2	     ;-----------------
     99	017C  E8 0129				     call MakeFrame		     ; Make frame for registers
    100
    101	017F  E8 005C				     call PrintRegNames		     ; Print names of registers
    102										     ; to write	near their status
    103
    104						     ;pop  ax			      ;------------------------
    105						     ;pop  bx			      ;	return parrent value  |
    106						     ;pop  cx			      ;	of registers	      |
    107						     ;pop  dx			      ;------------------------
    108						     ;push dx			      ;------------------------
    109						     ;push cx			      ;	save ax	bx cx dx in   |
    110						     ;push bx			      ;	stack again	      |
    111						     ;push ax			      ;------------------------
    112
    113						     ;call ShowRegisters	      ;	Show info about	registers
    114
Turbo Assembler	 Version 4.1	    02/25/25 14:26:46	    Page 3
regframe.asm



    115	0182  EB 19 90				     jmp  NotPressG		     ; goto NotPressG
    116
    117	0185			     NotPressF:
    118	0185  3C 22				     cmp  al, 22h		     ; if (al != 'Press	G'){
    119	0187  75 14				     jne  NotPressG		     ; goto NotPressG }
    120
    121	0189  B4 09				     mov  ah, 09h		     ;-----------------
    122	018B  B9 000E				     mov  cx, 14		     ;		      |
    123	018E  BA 0011				     mov  dx, 17		     ; attributes for |
    124	0191  BE 0260r				     lea  si, Style		     ; frame	      |
    125	0194  83 C6 3F				     add  si, 9	* 7		     ;		      |
    126	0197  BF 007C				     mov  di, (80 - 18)	* 2	     ;-----------------
    127	019A  E8 010B				     call MakeFrame		     ; Make empty box
    128
    129	019D			     NotPressG:
    130	019D  E4 61				     in	  al,  61h		     ; al = port 61h
    131	019F  0C 80				     or	  al,  80h		     ; al |= 10000000b
    132	01A1  E6 61				     out  61h, al		     ; out to 61h PPI
    133	01A3  24 7F				     and  al, not 80h		     ; al &= 01111111b
    134	01A5  E6 61				     out  61h, al		     ; out to 61h PPI
    135
    136						     ;mov  al,	20h		      ;	al = 20h
    137						     ;out  20h,	al		      ;	out to interrupt controller
    138
    139	01A7  58				     pop  ax			     ; back ax from stack
    140	01A8  5B				     pop  bx			     ; back bx from stack
    141	01A9  59				     pop  cx			     ; back cx from stack
    142	01AA  5A				     pop  dx			     ; back dx from stack
    143	01AB  1F				     pop  ds			     ; back ds from stack
    144	01AC  07				     pop  es			     ; back es from stack
    145	01AD  5F				     pop  di			     ; back di from stack
    146	01AE  5E				     pop  si			     ; back si from stack
    147
    148	01AF  EA				     db	  0eah			     ; jmp
    149	01B0  0000		     Ofs_old_09h     dw	  0			     ; offset
    150	01B2  0000		     Seg_old_09h     dw	  0			     ; segment
    151	01B4  90				     nop
    152	01B5  90				     nop
    153	01B6  90				     nop
    154	01B7  90				     nop
    155	01B8  90				     nop
    156	01B9  CF				     iret			     ; interrupt return
    157	01BA			     MY_ISR_09h	     endp
    158
    159				     ;------------------------------------------------------------------------------
    160				     ; MY_ISR_08h - new	handler	for interrupt 08h
    161				     ; Entry:	     None
    162				     ; Exit:	     None
    163				     ; Destroy:	     None
    164				     ;------------------------------------------------------------------------------
    165	01BA			     MY_ISR_08h	     proc
    166	01BA  90				     nop
    167	01BB  90				     nop
    168	01BC  90				     nop
    169	01BD  90				     nop
    170	01BE  56				     push si			     ; save si in stack
    171	01BF  57				     push di			     ; save di in stack
Turbo Assembler	 Version 4.1	    02/25/25 14:26:46	    Page 4
regframe.asm



    172	01C0  06				     push es			     ; save es in stack
    173	01C1  1E				     push ds			     ; save ds in stack
    174	01C2  52				     push dx			     ; save dx in stack
    175	01C3  51				     push cx			     ; save cx in stack
    176	01C4  53				     push bx			     ; save bx in stack
    177	01C5  50				     push ax			     ; save ax in stack
    178
    179	01C6  0E				     push cs
    180	01C7  1F				     pop  ds			     ; ds = cs
    181
    182	01C8  E8 0032				     call ShowRegisters		     ; Show info about registers
    183
    184						     ;mov  al,	20h		      ;	al = 20h
    185						     ;out  20h,	al		      ;	out to interrupt controller
    186
    187	01CB  58				     pop  ax			     ; back ax from stack
    188	01CC  5B				     pop  bx			     ; back bx from stack
    189	01CD  59				     pop  cx			     ; back cx from stack
    190	01CE  5A				     pop  dx			     ; back dx from stack
    191	01CF  1F				     pop  ds			     ; back ds from stack
    192	01D0  07				     pop  es			     ; back es from stack
    193	01D1  5F				     pop  di			     ; back di from stack
    194	01D2  5E				     pop  si			     ; back si from stack
    195
    196	01D3  EA				     db	  0eah			     ; jmp
    197	01D4  0000		     Ofs_old_08h     dw	  0			     ; offset  old ISR_08h
    198	01D6  0000		     Seg_old_08h     dw	  0			     ; segment old ISR_08h
    199	01D8  90				     nop
    200	01D9  90				     nop
    201	01DA  90				     nop
    202	01DB  90				     nop
    203	01DC  90				     nop
    204	01DD  CF				     iret			     ; interrupt return
    205	01DE			     MY_ISR_08h	     endp
    206
    207				     ;------------------------------------------------------------------------------
    208				     ; PrintRegNames func to output in screen base for showing registers status
    209				     ; Entry:	     TextReg - string of text
    210				     ; Exit:	     None
    211				     ; Destroy:	     di, es, si, ax, cx, dx
    212				     ;------------------------------------------------------------------------------
    213	01DE			     PrintRegNames   proc
    214
    215	01DE  BF B800				     mov  di, 0b800h		     ; VIDEOSEG
    216	01E1  8E C7				     mov  es, di		     ; es = videoseg
    217
    218				     ;---------------displaying	just text on the screen-----------------------------
    219
    220	01E3  BF 01C2				     mov  di, 80 * 2 * 2 + (80 - 15) * 2  ; third string + offset
    221										     ; di - start pos of text
    222
    223	01E6  BE 0254r				     lea  si, TextReg		     ; si = start of TextReg
    224	01E9  B4 09				     mov  ah, 09h		     ; color of	text
    225
    226	01EB  BA 0004				     mov  dx, 4			     ; number of registers
    227	01EE			     NewRegisters:
    228	01EE  B9 0003				     mov  cx, 3			     ; number of symbols in string
Turbo Assembler	 Version 4.1	    02/25/25 14:26:46	    Page 5
regframe.asm



    229	01F1			     NewChar:
    230	01F1  AC				     lodsb			     ; mov al, ds:[si]
    231										     ; inc si
    232	01F2  AB				     stosw			     ; mov es:[di], ax && di +=	2
    233	01F3  E2 FC				     loop NewChar		     ; goto NewChar}
    234
    235	01F5  81 C7 009A			     add  di, (80 - 3) * 2	     ; new string
    236
    237	01F9  4A				     dec  dx			     ; if (--dx	== 0) {
    238	01FA  75 F2				     jne  NewRegisters		     ; goto NewRegisters }
    239
    240	01FC  C3				     ret
    241	01FD			     PrintRegNames   endp
    242
    243				     ;------------------------------------------------------------------------------
    244				     ; ShowRegisters Func to show information about registers
    245				     ; Entry:	     ax	- parrent value	of ax
    246				     ;		     bx	- parrent value	of bx
    247				     ;		     cx	- parrent value	of cx
    248				     ;		     dx	- parrent value	of dx
    249				     ; Exit:	     None
    250				     ; Destroy:	     si, di, es, ax, bx, cx, dx
    251				     ;------------------------------------------------------------------------------
    252	01FD			     ShowRegisters   proc
    253	01FD  1E				     push ds			     ; save ds in stack
    254										     ;------------------------
    255	01FE  52				     push dx			     ;			     |
    256	01FF  51				     push cx			     ; registers to print    |
    257	0200  53				     push bx			     ;			     |
    258	0201  50				     push ax			     ;------------------------
    259
    260	0202  0E				     push cs
    261	0203  1F				     pop  ds			     ; ds = cs
    262
    263	0204  BF B800				     mov  di, 0b800h		     ; VIDEOSEG
    264	0207  8E C7				     mov  es, di		     ; es = videoseg
    265
    266	0209  B4 09				     mov  ah, 09h		     ; color of	text
    267
    268				     ;---------------displaying	the register status on the screen-------------------
    269
    270	020B  BF 01C8				     mov  di, 80 * 2 * 2 + (80 - 12) * 2  ; third string + offset
    271	020E  B9 0004				     mov  cx, 4			     ; cx = number of registers
    272	0211			     NewRegValue:
    273	0211  5B				     pop  bx			     ; bx = value of some register
    274										     ; from stack
    275	0212  E8 0008				     call PrintHex		     ; value bx	to videoseg
    276
    277	0215  81 C7 0098			     add  di, (80 - 4) * 2	     ; new string
    278
    279	0219  E2 F6				     loop NewRegValue		     ; if (--cx) goto NewRegValue
    280
    281	021B  1F				     pop  ds			     ; back ds from stack
    282
    283	021C  C3				     ret
    284	021D			     ShowRegisters   endp
    285
Turbo Assembler	 Version 4.1	    02/25/25 14:26:46	    Page 6
regframe.asm



    286				     ;------------------------------------------------------------------------------
    287				     ; PrintHex	     Func to print to videoseg hex number
    288				     ; Entry:	     ah	- color	of print
    289				     ;		     bx	- value	to videoseg
    290				     ;		     di	- start	of print
    291				     ;		     es	- videoseg
    292				     ; Exit:	     None
    293				     ; Destroy:	     di, al
    294				     ;------------------------------------------------------------------------------
    295	021D			     PrintHex	     proc
    296				     ;-----------------------------------------
    297				     ;		     For example:     19a4    |
    298				     ;-----------------------------------------			---------------
    299
    300				     ;---------------First-number---------------------------------------------------
    301				     ;								---------------
    302	021D  8A C7				     mov  al, bh		     ; al  = bh	| ex: al = 19 |
    303				     ;								---------------
    304				     ;								---------------
    305	021F  D0 E8 D0 E8 D0 E8	D0+		     shr  al, 4			     ; al /= 16	| ex: al = 1  |
    306	      E8
    307				     ;								---------------
    308	0227  E8 001C				     call PrintOneHexNumber	     ; print hex al
    309
    310				     ;---------------Second-Number--------------------------------------------------
    311				     ;								---------------
    312	022A  8A C7				     mov  al, bh		     ; al  = bh	| ex: al = 19 |
    313				     ;								---------------
    314	022C  24 0F				     and  al, 0Fh		     ; al &= 00001111b
    315				     ;								---------------
    316				     ;								| ex: al = 9  |
    317				     ;								---------------
    318	022E  E8 0015				     call PrintOneHexNumber	     ; print hex al
    319
    320				     ;---------------Third-Number---------------------------------------------------
    321				     ;								---------------
    322	0231  8A C3				     mov  al, bl		     ; al = bl	| ex: al = a4 |
    323				     ;								---------------
    324				     ;								---------------
    325	0233  D0 E8 D0 E8 D0 E8	D0+		     shr  al, 4			     ; al /= 16	| ex: al = a  |
    326	      E8
    327				     ;								---------------
    328	023B  E8 0008				     call PrintOneHexNumber	     ; print hex al
    329
    330				     ;---------------Fourth-Number--------------------------------------------------
    331				     ;								---------------
    332	023E  8A C3				     mov  al, bl		     ; al  = bh	| ex: al = a4 |
    333				     ;								---------------
    334	0240  24 0F				     and  al, 0Fh		     ; al &= 00001111b
    335				     ;								---------------
    336				     ;								| ex: al = 4  |
    337				     ;								---------------
    338	0242  E8 0001				     call PrintOneHexNumber	     ; print hex al
    339
    340	0245  C3				     ret
    341	0246			     PrintHex	     endp
    342
Turbo Assembler	 Version 4.1	    02/25/25 14:26:46	    Page 7
regframe.asm



    343				     ;------------------------------------------------------------------------------
    344				     ; PrintOneHexNumber Func to print one hex number to screen
    345				     ; Entry:	     es	- videoseg
    346				     ;		     ah	- color
    347				     ;		     al	- hex number
    348				     ;		     di	- start	of print
    349				     ; Exit:	     di	- end of print
    350				     ; Destroy:	di
    351				     ;------------------------------------------------------------------------------
    352	0246			     PrintOneHexNumber proc
    353
    354	0246  3C 09				     cmp  al, 9			     ; if (al >	9) {
    355
    356	0248  77 06				     ja	  IsHexLetter		     ; goto IsHexLetter1 }
    357
    358	024A  04 30				     add  al, 30h		     ; ax = hex	of number
    359
    360	024C  AB				     stosw			     ; mov es:[di], ax && di +=	2
    361
    362	024D  EB 04 90				     jmp  NextNumber		     ; goto NextNumber
    363
    364	0250			     IsHexLetter:
    365	0250  04 37				     add  al, 37h		     ; hex of letter A - F in number
    366
    367	0252  AB				     stosw			     ; mov es:[di], ax && di +=	2
    368	0253			     NextNumber:
    369	0253  C3				     ret
    370	0254			     PrintOneHexNumber endp
    371
    372				     ;------------------------------------------------------------------------------
    373
    374	0254  61 78 20 62 78 20	63+  TextReg	     db	"ax bx cx dx "
    375	      78 20 64 78 20
    376
    377				     ;------------------------------------------------------------------------------
    378				     ;				     2D	Array of frame's symbols
    379				     ;			 1.1   1.2   1.3   2.1	 2.2   2.3   3.1   3.2	 3.3
    380	0260  C9 CD BB BA 00 BA	C8+  Style	     db	0c9h, 0cdh, 0bbh, 0bah,	 00h, 0bah, 0c8h, 0cdh,	0bch
    381	      CD BC
    382	0269  03 03 03 03 00 03	03+		     db	 03h,  03h,  03h,  03h,	 00h,  03h,  03h,  03h,	 03h
    383	      03 03
    384	0272  DA C4 BF B3 00 B3	C0+		     db	0dah, 0c4h, 0bfh, 0b3h,	 00h, 0b3h, 0c0h, 0c4h,	0d9h
    385	      C4 D9
    386	027B  31 32 33 34 35 36	37+		     db	"123456789"
    387	      38 39
    388	0284  DC DC DC DD 00 DE	DF+		     db	0dch, 0dch, 0dch, 0ddh,	 00h, 0deh, 0dfh, 0dfh,	0dfh
    389	      DF DF
    390	028D  24 24 24 24 00 24	24+		     db	024h, 024h, 024h, 024h,	 00h, 024h, 024h, 024h,	024h
    391	      24 24
    392	0296  E0 E1 E7 E1 E0 E7	E7+		     db	0e0h, 0e1h, 0e7h, 0e1h,	0e0h, 0e7h, 0e7h, 0e1h,	0e0h
    393	      E1 E0
    394	029F  00 00 00 00 00 00	00+		     db	00h,   00h,  00h,  00h,	 00h,  00h,  00h,  00h,	 00h
    395	      00 00
    396
    397				     ; 1.1 - start  symbol of first  string
    398				     ; 1.2 - middle symbol of first  string
    399				     ; 1.3 - end    symbol of first  string
Turbo Assembler	 Version 4.1	    02/25/25 14:26:46	    Page 8
regframe.asm



    400				     ; 2.1 - start  symbol of middle strings
    401				     ; 2.2 - middle symbol of middle strings
    402				     ; 2.3 - end    symbol of middle strings
    403				     ; 3.1 - start  symbol of end    string
    404				     ; 3.2 - middle symbol of end    string
    405				     ; 3.3 - end    symbol of end    string
    406				     ;------------------------------------------------------------------------------
    407
    408				     include frame.asm
1   409				     ;------------------------------------------------------------------------------
1   410				     ;				   Frame functions
1   411				     ;------------------------------------------------------------------------------
1   412
1   413				     ;------------------------------------------------------------------------------
1   414				     ; MakeFrame     Func to make frame
1   415				     ; Entry:	     ah	    - color of frame
1   416				     ;		     si	    - ptr   of array of	the symbols for	frame
1   417				     ;		     cx	    - len   of frame
1   418				     ;		     dx	    - high  of frame
1   419				     ;		     di	    - start of print (upper left cornel)
1   420				     ; Exit:	     None
1   421				     ; Destroy:	     ax, si, cx, dx, di, es
1   422				     ;------------------------------------------------------------------------------
1   423	02A8			     MakeFrame	     proc
1   424
1   425	02A8  57				     push di			     ; save start of print in stack
1   426	02A9  BF B800				     mov  di, 0b800h		     ; VIDEOSEG
1   427	02AC  8E C7				     mov  es, di		     ; es = videoseg
1   428	02AE  5F				     pop  di			     ; back start of print
1   429
1   430	02AF  51				     push cx			     ; save cx in stack
1   431	02B0  E8 001D				     call MakeStrFrame		     ; make first string of frame
1   432	02B3  59				     pop  cx			     ; pop cx from stack
1   433	02B4  83 EA 02				     sub  dx, 2			     ; dx -= 2;	dx = number
1   434										     ; of middle strings
1   435	02B7			     MakeMiddle:
1   436	02B7  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
1   437	02BB  51				     push cx			     ; save cx
1   438	02BC  56				     push si			     ; save si
1   439	02BD  E8 0010				     call MakeStrFrame		     ; make middle string
1   440	02C0  5E				     pop si			     ; si = &(start symbol of
1   441										     ; middle strings)
1   442	02C1  59				     pop  cx			     ; cx = len	of frame
1   443	02C2  4A				     dec  dx			     ; dx--;
1   444	02C3  75 F2				     jne  MakeMiddle		     ; loop
1   445
1   446	02C5  83 C6 03				     add  si, 3			     ; si = &(start symbol of
1   447										     ; end string)
1   448	02C8  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
1   449
1   450	02CC  E8 0001				     call MakeStrFrame		     ; make end	string of frame
1   451
1   452	02CF  C3				     ret
1   453	02D0			     MakeFrame	     endp
1   454
1   455				     ;------------------------------------------------------------------------------
1   456				     ; MakeStrFrame  Func to make string of frame
Turbo Assembler	 Version 4.1	    02/25/25 14:26:46	    Page 9
regframe.asm



1   457				     ; Entry:	     ah	    - color of string
1   458				     ;		     si	    - array of symbol for string
1   459				     ;		     cx	    - len of string
1   460				     ;		     di	    - start of print string
1   461				     ;		     es	    - videoseg
1   462				     ; Exit:	     None
1   463				     ; Destroy:	     ax, cx, si
1   464				     ;------------------------------------------------------------------------------
1   465	02D0			     MakeStrFrame    proc
1   466	02D0  57				     push di			     ; save di = start of string
1   467
1   468	02D1  AC				     lodsb			     ; ax = first symbol of string
1   469										     ; mov al, ds:[si] && inc si
1   470	02D2  AB				     stosw			     ; mov es:[di], ax && di +=	2
1   471
1   472	02D3  AC				     lodsb			     ; ax = middle symbol of string
1   473										     ; mov al, ds:[si] && inc si
1   474	02D4  83 E9 02				     sub  cx, 2			     ; cx -= 2;	cx = number
1   475										     ; of middle symbols
1   476	02D7  F3> AB				     rep stosw			     ; mov es:[di], ax && di +=	2
1   477										     ; cx -= 1;	cx = 0?; make loop
1   478										     ; put all middle symbols
1   479	02D9  AC				     lodsb			     ; ax = end	symbol of string
1   480										     ; mov al, ds:[si] && inc si
1   481	02DA  AB				     stosw			     ; mov es:[di], ax && di +=	2
1   482	02DB  5F				     pop  di			     ; back di = start of string
1   483
1   484	02DC  C3				     ret
1   485	02DD			     MakeStrFrame    endp
1   486
1   487
1   488
    489
    490	02DD			     EOP:
    491				     end	     Start
Turbo Assembler	 Version 4.1	    02/25/25 14:26:46	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/25/25"
??FILENAME			  Text	 "regframe"
??TIME				  Text	 "14:26:45"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGFRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
EOP				  Near	 DGROUP:02DD
ISHEXLETTER			  Near	 DGROUP:0250
MAKEFRAME			  Near	 DGROUP:02A8
MAKEMIDDLE			  Near	 DGROUP:02B7
MAKESTRFRAME			  Near	 DGROUP:02D0
MY_ISR_08H			  Near	 DGROUP:01BA
MY_ISR_09H			  Near	 DGROUP:0157
NEWCHAR				  Near	 DGROUP:01F1
NEWREGISTERS			  Near	 DGROUP:01EE
NEWREGVALUE			  Near	 DGROUP:0211
NEXTNUMBER			  Near	 DGROUP:0253
NOTPRESSF			  Near	 DGROUP:0185
NOTPRESSG			  Near	 DGROUP:019D
OFS_OLD_08H			  Word	 DGROUP:01D4
OFS_OLD_09H			  Word	 DGROUP:01B0
PRINTHEX			  Near	 DGROUP:021D
PRINTONEHEXNUMBER		  Near	 DGROUP:0246
PRINTREGNAMES			  Near	 DGROUP:01DE
SEG_OLD_08H			  Word	 DGROUP:01D6
SEG_OLD_09H			  Word	 DGROUP:01B2
SHOWREGISTERS			  Near	 DGROUP:01FD
START				  Near	 DGROUP:0100
STYLE				  Byte	 DGROUP:0260
TEXTREG				  Byte	 DGROUP:0254

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  02DD Word	  Public  CODE
