Turbo Assembler	 Version 4.1	    02/24/25 20:39:53	    Page 1
regframe.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;				     Second Task
      3				     ;			      Frame with info about registers
      4				     ;				  "Resident Frame"
      5				     ;			       (c) 2025	Muratov	Artyom
      6				     ;------------------------------------------------------------------------------
      7
      8	0000			     .model tiny
      9	0000			     .code
     10				     org 100h
     11
     12	0100			     Start:
     13	0100  33 C0				     xor  ax, ax		     ; ax = 0
     14	0102  8E C0				     mov  es, ax		     ; es = ax
     15	0104  BB 0024				     mov  bx, 09h * 4		     ; offset for ptr to ISR_09h
     16
     17	0107  26: 8B 07				     mov  ax, es:[bx]		     ; Ofs_old_09h and Seg_old_09h
     18	010A  A3 0186r				     mov  Ofs_old_09h, ax	     ; from array with
     19	010D  26: 8B 47	02			     mov  ax, es:[bx + 2]	     ; ptrs to interrupt service
     20	0111  A3 0188r				     mov  Seg_old_09h, ax	     ; routine
     21
     22
     23	0114  CD 09				     int  09h			     ; call old	ISR 09h
     24
     25	0116  FA				     cli
     26	0117  26: C7 07	0136r			     mov  es:[bx], offset MY_ISR_09h ; offset of my interrupt 09h
     27										     ; service routiny
     28	011C  0E				     push cs
     29	011D  58				     pop  ax			     ; ax = cs
     30	011E  26: 89 47	02			     mov  es:[bx + 2], ax	     ; es:[bx +	2] = ax	(= segment
     31										     ; with code)
     32	0122  FB				     sti
     33
     34	0123  CD 09				     int  09h			     ; call old	ISR 09h
     35
     36	0125  B8 3100				     mov  ax, 3100h		     ; DOS Fn 31H: Terminate & Stay
     37										     ; Resident
     38	0128  BA 0208r				     mov  dx, offset EOP	     ; dx = &EOP
     39	012B  D1 EA D1 EA D1 EA	D1+		     shr  dx, 4			     ; dx /= 16
     40	      EA
     41	0133  42				     inc  dx			     ; dx++
     42	0134  CD 21				     int  21h
     43
     44				     ;------------------------------------------------------------------------------
     45				     ; MY_ISR_09h - new	handler	for interrupt 09h
     46				     ; Entry:	     None
     47				     ; Exit:	     None
     48				     ; Destroy:	     None
     49				     ;------------------------------------------------------------------------------
     50	0136			     MY_ISR_09h	     proc
     51	0136  50				     push ax			     ; save ax in stack
     52	0137  51				     push cx			     ; save cx in stack
     53	0138  52				     push dx			     ; save dx in stack
     54	0139  56				     push si			     ; save si in stack
     55	013A  57				     push di			     ; save di in stack
     56	013B  06				     push es			     ; save es in stack
     57	013C  1E				     push ds
Turbo Assembler	 Version 4.1	    02/24/25 20:39:53	    Page 2
regframe.asm



     58
     59	013D  0E				     push cs
     60	013E  1F				     pop  ds
     61
     62	013F  E4 60				     in	  al, 60h		     ; read data from PPI port
     63	0141  3C 21				     cmp  al, 21h		     ; if (al != 'Press	F'){
     64	0143  75 17				     jne  NotPressF		    ; goto NotPressF }
     65
     66	0145  B4 09				     mov  ah, 09h		     ;-----------------
     67	0147  B9 000E				     mov  cx, 14		     ;		      |
     68	014A  BA 0011				     mov  dx, 17		     ; attributes for |
     69	014D  BE 018Br				     lea  si, Style		     ; frame	      |
     70	0150  83 C6 12				     add  si, 9	* 2		     ;		      |
     71	0153  BF 0084				     mov  di, (80 - 14)	* 2	     ;-----------------
     72	0156  E8 007A				     call MakeFrame		     ; Make frame for registers
     73
     74	0159  EB 19 90				     jmp  NotPressG		     ; goto NotPressG
     75
     76	015C			     NotPressF:
     77	015C  3C 22				     cmp  al, 22h		     ; if (al != 'Press	G'){
     78	015E  75 14				     jne  NotPressG		     ; goto NotPressG }
     79
     80	0160  B4 09				     mov  ah, 09h		     ;-----------------
     81	0162  B9 000E				     mov  cx, 14		     ;		      |
     82	0165  BA 0011				     mov  dx, 17		     ; attributes for |
     83	0168  BE 018Br				     lea  si, Style		     ; frame	      |
     84	016B  83 C6 3F				     add  si, 9	* 7		     ;		      |
     85	016E  BF 0084				     mov  di, (80 - 14)	* 2	     ;-----------------
     86	0171  E8 005F				     call MakeFrame		     ; Make frame for registers
     87
     88	0174			     NotPressG:
     89	0174  E4 61				     in	  al,  61h		     ; al = port 61h
     90	0176  0C 80				     or	  al,  80h		     ; al |= 10000000b
     91	0178  E6 61				     out  61h, al		     ; out to 61h PPI
     92	017A  24 7F				     and  al, not 80h		     ; al &= 01111111b
     93	017C  E6 61				     out  61h, al		     ; out to 61h PPI
     94
     95						     ;mov  al,	20h		      ;	al = 20h
     96						     ;out  20h,	al		      ;	out to interrupt controller
     97
     98	017E  1F				     pop  ds
     99	017F  07				     pop  es			     ; back es from stack
    100	0180  5F				     pop  di			     ; back di from stack
    101	0181  5E				     pop  si			     ; back si from stack
    102	0182  5A				     pop  dx			     ; back es from stack
    103	0183  59				     pop  cx			     ; back di from stack
    104	0184  58				     pop  ax			     ; back si from stack
    105
    106	0185  EA				     db	  0eah			     ; jmp
    107	0186  0000		     Ofs_old_09h     dw	  0			     ; offset
    108	0188  0000		     Seg_old_09h     dw	  0			     ; segment
    109
    110	018A  CF				     iret			     ; interrupt return
    111	018B			     MY_ISR_09h	     endp
    112
    113				     ;------------------------------------------------------------------------------
    114				     ;		   2D Array of frame's symbols
Turbo Assembler	 Version 4.1	    02/24/25 20:39:53	    Page 3
regframe.asm



    115				     ;	      1.1   1.2	  1.3	2.1   2.2   2.3	  3.1	3.2   3.3
    116	018B  C9 CD BB BA 00 BA	C8+  Style db 0c9h, 0cdh, 0bbh,	0bah,  00h, 0bah, 0c8h,	0cdh, 0bch
    117	      CD BC
    118	0194  03 03 03 03 00 03	03+	   db  03h,  03h,  03h,	 03h,  00h,  03h,  03h,	 03h,  03h
    119	      03 03
    120	019D  DA C4 BF B3 00 B3	C0+	   db 0dah, 0c4h, 0bfh,	0b3h,  00h, 0b3h, 0c0h,	0c4h, 0d9h
    121	      C4 D9
    122	01A6  31 32 33 34 35 36	37+	   db "123456789"
    123	      38 39
    124	01AF  DC DC DC DD 00 DE	DF+	   db 0dch, 0dch, 0dch,	0ddh,  00h, 0deh, 0dfh,	0dfh, 0dfh
    125	      DF DF
    126	01B8  24 24 24 24 00 24	24+	   db 024h, 024h, 024h,	024h,  00h, 024h, 024h,	024h, 024h
    127	      24 24
    128	01C1  E0 E1 E7 E1 E0 E7	E7+	   db 0e0h, 0e1h, 0e7h,	0e1h, 0e0h, 0e7h, 0e7h,	0e1h, 0e0h
    129	      E1 E0
    130	01CA  00 00 00 00 00 00	00+	   db 00h,   00h,  00h,	 00h,  00h,  00h,  00h,	 00h,  00h
    131	      00 00
    132
    133				     ; 1.1 - start  symbol of first  string
    134				     ; 1.2 - middle symbol of first  string
    135				     ; 1.3 - end    symbol of first  string
    136				     ; 2.1 - start  symbol of middle strings
    137				     ; 2.2 - middle symbol of middle strings
    138				     ; 2.3 - end    symbol of middle strings
    139				     ; 3.1 - start  symbol of end    string
    140				     ; 3.2 - middle symbol of end    string
    141				     ; 3.3 - end    symbol of end    string
    142				     ;------------------------------------------------------------------------------
    143
    144				     include frame.asm
1   145				     ;------------------------------------------------------------------------------
1   146				     ;				   Frame functions
1   147				     ;------------------------------------------------------------------------------
1   148
1   149				     ;------------------------------------------------------------------------------
1   150				     ; MakeFrame     Func to make frame
1   151				     ; Entry:	     ah	    - color of frame
1   152				     ;		     si	    - ptr   of array of	the symbols for	frame
1   153				     ;		     cx	    - len   of frame
1   154				     ;		     dx	    - high  of frame
1   155				     ;		     di	    - start of print (upper left cornel)
1   156				     ; Exit:	     None
1   157				     ; Destroy:	     ax, si, cx, dx, di, es
1   158				     ;------------------------------------------------------------------------------
1   159	01D3			     MakeFrame	     proc
1   160						     ;push cs
1   161						     ;pop  ds
1   162
1   163	01D3  57				     push di			     ; save start of print in stack
1   164	01D4  BF B800				     mov  di, 0b800h		     ; VIDEOSEG
1   165	01D7  8E C7				     mov  es, di		     ; es = videoseg
1   166	01D9  5F				     pop  di			     ; back start of print
1   167
1   168	01DA  51				     push cx			     ; save cx in stack
1   169	01DB  E8 001D				     call MakeStrFrame		     ; make first string of frame
1   170	01DE  59				     pop  cx			     ; pop cx from stack
1   171	01DF  83 EA 02				     sub  dx, 2			     ; dx -= 2;	dx = number
Turbo Assembler	 Version 4.1	    02/24/25 20:39:53	    Page 4
regframe.asm



1   172										     ; of middle strings
1   173	01E2			     MakeMiddle:
1   174	01E2  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
1   175	01E6  51				     push cx			     ; save cx
1   176	01E7  56				     push si			     ; save si
1   177	01E8  E8 0010				     call MakeStrFrame		     ; make middle string
1   178	01EB  5E				     pop si			     ; si = &(start symbol of
1   179										     ; middle strings)
1   180	01EC  59				     pop  cx			     ; cx = len	of frame
1   181	01ED  4A				     dec  dx			     ; dx--;
1   182	01EE  75 F2				     jne  MakeMiddle		     ; loop
1   183
1   184	01F0  83 C6 03				     add  si, 3			     ; si = &(start symbol of
1   185										     ; end string)
1   186	01F3  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
1   187
1   188	01F7  E8 0001				     call MakeStrFrame		     ; make end	string of frame
1   189
1   190	01FA  C3				     ret
1   191	01FB			     MakeFrame	     endp
1   192
1   193				     ;------------------------------------------------------------------------------
1   194				     ; MakeStrFrame  Func to make string of frame
1   195				     ; Entry:	     ah	    - color of string
1   196				     ;		     si	    - array of symbol for string
1   197				     ;		     cx	    - len of string
1   198				     ;		     di	    - start of print string
1   199				     ;		     es	    - videoseg
1   200				     ; Exit:	     None
1   201				     ; Destroy:	     ax, cx, si
1   202				     ;------------------------------------------------------------------------------
1   203	01FB			     MakeStrFrame    proc
1   204	01FB  57				     push di			     ; save di = start of string
1   205
1   206	01FC  AC				     lodsb			     ; ax = first symbol of string
1   207										     ; mov al, ds:[si] && inc si
1   208	01FD  AB				     stosw			     ; mov es:[di], ax && di +=	2
1   209
1   210	01FE  AC				     lodsb			     ; ax = middle symbol of string
1   211										     ; mov al, ds:[si] && inc si
1   212	01FF  83 E9 02				     sub  cx, 2			     ; cx -= 2;	cx = number
1   213										     ; of middle symbols
1   214	0202  F3> AB				     rep stosw			     ; mov es:[di], ax && di +=	2
1   215										     ; cx -= 1;	cx = 0?; make loop
1   216										     ; put all middle symbols
1   217	0204  AC				     lodsb			     ; ax = end	symbol of string
1   218										     ; mov al, ds:[si] && inc si
1   219	0205  AB				     stosw			     ; mov es:[di], ax && di +=	2
1   220	0206  5F				     pop  di			     ; back di = start of string
1   221
1   222	0207  C3				     ret
1   223	0208			     MakeStrFrame    endp
1   224
1   225
1   226
    227
    228	0208			     EOP:
Turbo Assembler	 Version 4.1	    02/24/25 20:39:53	    Page 5
regframe.asm



    229				     end	     Start
Turbo Assembler	 Version 4.1	    02/24/25 20:39:53	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/24/25"
??FILENAME			  Text	 "regframe"
??TIME				  Text	 "20:39:53"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGFRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
EOP				  Near	 DGROUP:0208
MAKEFRAME			  Near	 DGROUP:01D3
MAKEMIDDLE			  Near	 DGROUP:01E2
MAKESTRFRAME			  Near	 DGROUP:01FB
MY_ISR_09H			  Near	 DGROUP:0136
NOTPRESSF			  Near	 DGROUP:015C
NOTPRESSG			  Near	 DGROUP:0174
OFS_OLD_09H			  Word	 DGROUP:0186
SEG_OLD_09H			  Word	 DGROUP:0188
START				  Near	 DGROUP:0100
STYLE				  Byte	 DGROUP:018B

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0208 Word	  Public  CODE
