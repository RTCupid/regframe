Turbo Assembler	 Version 4.1	    02/25/25 15:06:08	    Page 1
regframe.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;				     Second Task
      3				     ;			      Frame with info about registers
      4				     ;				  "Resident Frame"
      5				     ;			       (c) 2025	Muratov	Artyom
      6				     ;------------------------------------------------------------------------------
      7
      8	0000			     .model tiny
      9	0000			     .code
     10				     org 100h
     11
     12	0100			     Start:
     13				     ;---------------intercept-interrupt-09h----------------------------------------
     14	0100  33 C0				     xor  ax, ax		     ; ax = 0
     15	0102  8E C0				     mov  es, ax		     ; es = ax
     16	0104  BB 0024				     mov  bx, 09h * 4		     ; offset for ptr to ISR_09h
     17
     18	0107  26: 8B 07				     mov  ax, es:[bx]		     ; Ofs_old_09h and Seg_old_09h
     19	010A  A3 01BEr				     mov  Ofs_old_09h, ax	     ; from array with
     20	010D  26: 8B 47	02			     mov  ax, es:[bx + 2]	     ; ptrs to interrupt service
     21	0111  A3 01C0r				     mov  Seg_old_09h, ax	     ; routine
     22
     23	0114  CD 09				     int  09h			     ; call old	ISR 09h
     24
     25	0116  FA				     cli
     26	0117  26: C7 07	0157r			     mov  es:[bx], offset MY_ISR_09h ; offset of my interrupt 09h
     27										     ; service routiny
     28	011C  0E				     push cs
     29	011D  58				     pop  ax			     ; ax = cs
     30	011E  26: 89 47	02			     mov  es:[bx + 2], ax	     ; segment of my interrupt 08h
     31	0122  FB				     sti
     32
     33	0123  CD 09				     int  09h			     ; call old	ISR 09h
     34
     35				     ;---------------intercept-interrupt-08h----------------------------------------
     36
     37	0125  BB 0020				     mov  bx, 08h * 4		     ; offset for ptr to ISR_08h
     38
     39	0128  26: 8B 07				     mov  ax, es:[bx]		     ; Ofs_old_09h and Seg_old_09h
     40	012B  A3 01EAr				     mov  Ofs_old_08h, ax	     ; from array with
     41	012E  26: 8B 47	02			     mov  ax, es:[bx + 2]	     ; ptrs to interrupt service
     42	0132  A3 01ECr				     mov  Seg_old_08h, ax	     ; routine
     43
     44	0135  CD 08				     int  08h
     45
     46	0137  FA				     cli
     47	0138  26: C7 07	01C9r			     mov  es:[bx], offset MY_ISR_08h ; offset of my interrupt 08h
     48										     ; service routiny
     49	013D  0E				     push cs
     50	013E  58				     pop  ax			     ; ax = cs
     51	013F  26: 89 47	02			     mov  es:[bx + 2], ax	     ; segment of my interrupt 08h
     52	0143  FB				     sti
     53
     54	0144  CD 08				     int  08h
     55
     56				     ;---------------end-of-intercept-----------------------------------------------
     57
Turbo Assembler	 Version 4.1	    02/25/25 15:06:08	    Page 2
regframe.asm



     58	0146  B8 3100				     mov  ax, 3100h		     ; DOS Fn 31H: Terminate & Stay
     59										     ; Resident
     60	0149  BA 02F3r				     mov  dx, offset EOP	     ; dx = &EOP
     61	014C  D1 EA D1 EA D1 EA	D1+		     shr  dx, 4			     ; dx /= 16
     62	      EA
     63	0154  42				     inc  dx			     ; dx++
     64	0155  CD 21				     int  21h
     65
     66				     ;------------------------------------------------------------------------------
     67				     ; MY_ISR_09h - new	handler	for interrupt 09h
     68				     ; Entry:	     None
     69				     ; Exit:	     None
     70				     ; Destroy:	     None
     71				     ;------------------------------------------------------------------------------
     72	0157			     MY_ISR_09h	     proc
     73	0157  90				     nop
     74	0158  90				     nop
     75	0159  90				     nop
     76	015A  90				     nop
     77	015B  56				     push si			     ; save si in stack
     78	015C  57				     push di			     ; save di in stack
     79	015D  06				     push es			     ; save es in stack
     80	015E  1E				     push ds			     ; save ds in stack
     81	015F  52				     push dx			     ; save dx in stack
     82	0160  51				     push cx			     ; save cx in stack
     83	0161  53				     push bx			     ; save bx in stack
     84	0162  50				     push ax			     ; save ax in stack
     85
     86	0163  0E				     push cs
     87	0164  1F				     pop  ds			     ; ds = cs
     88
     89	0165  E4 60				     in	  al, 60h		     ; read data from PPI port
     90	0167  3C 21				     cmp  al, 21h		     ; if (al != 'Press	F'){
     91	0169  75 21				     jne  NotPressF		    ; goto NotPressF }
     92
     93	016B  B4 09				     mov  ah, 09h		     ;-----------------
     94	016D  B9 000E				     mov  cx, 14		     ;		      |
     95	0170  BA 0011				     mov  dx, 17		     ; attributes for |
     96	0173  BE 0276r				     lea  si, Style		     ; frame	      |
     97	0176  83 C6 12				     add  si, 9	* 2		     ;		      |
     98	0179  BF 007C				     mov  di, (80 - 18)	* 2	     ;-----------------
     99	017C  E8 013F				     call MakeFrame		     ; Make frame for registers
    100
    101	017F  E8 0072				     call PrintRegNames		     ; Print names of registers
    102										     ; to write	near their status
    103	0182  2E: C6 06	01C2r 01  +		     mov  cs:isEnabled,	1	     ; frame with reg enabled
    104	      90
    105
    106	0189  EB 20 90				     jmp  NotPressG		     ; goto NotPressG
    107
    108	018C			     NotPressF:
    109	018C  3C 22				     cmp  al, 22h		     ; if (al != 'Press	G'){
    110	018E  75 1B				     jne  NotPressG		     ; goto NotPressG }
    111
    112	0190  B4 09				     mov  ah, 09h		     ;-----------------
    113	0192  B9 000E				     mov  cx, 14		     ;		      |
    114	0195  BA 0011				     mov  dx, 17		     ; attributes for |
Turbo Assembler	 Version 4.1	    02/25/25 15:06:08	    Page 3
regframe.asm



    115	0198  BE 0276r				     lea  si, Style		     ; frame	      |
    116	019B  83 C6 3F				     add  si, 9	* 7		     ;		      |
    117	019E  BF 007C				     mov  di, (80 - 18)	* 2	     ;-----------------
    118	01A1  E8 011A				     call MakeFrame		     ; Make empty box
    119
    120	01A4  2E: C6 06	01C2r 00  +		     mov  cs:isEnabled,	0	     ; frame with reg disabled
    121	      90
    122
    123	01AB			     NotPressG:
    124	01AB  E4 61				     in	  al,  61h		     ; al = port 61h
    125	01AD  0C 80				     or	  al,  80h		     ; al |= 10000000b
    126	01AF  E6 61				     out  61h, al		     ; out to 61h PPI
    127	01B1  24 7F				     and  al, not 80h		     ; al &= 01111111b
    128	01B3  E6 61				     out  61h, al		     ; out to 61h PPI
    129
    130						     ;mov  al,	20h		      ;	al = 20h
    131						     ;out  20h,	al		      ;	out to interrupt controller
    132
    133	01B5  58				     pop  ax			     ; back ax from stack
    134	01B6  5B				     pop  bx			     ; back bx from stack
    135	01B7  59				     pop  cx			     ; back cx from stack
    136	01B8  5A				     pop  dx			     ; back dx from stack
    137	01B9  1F				     pop  ds			     ; back ds from stack
    138	01BA  07				     pop  es			     ; back es from stack
    139	01BB  5F				     pop  di			     ; back di from stack
    140	01BC  5E				     pop  si			     ; back si from stack
    141
    142	01BD  EA				     db	  0eah			     ; jmp
    143	01BE  0000		     Ofs_old_09h     dw	  0			     ; offset
    144	01C0  0000		     Seg_old_09h     dw	  0			     ; segment
    145	01C2  00		     isEnabled	     db	  0
    146	01C3  90				     nop
    147	01C4  90				     nop
    148	01C5  90				     nop
    149	01C6  90				     nop
    150	01C7  90				     nop
    151	01C8  CF				     iret			     ; interrupt return
    152	01C9			     MY_ISR_09h	     endp
    153
    154				     ;------------------------------------------------------------------------------
    155				     ; MY_ISR_08h - new	handler	for interrupt 08h
    156				     ; Entry:	     None
    157				     ; Exit:	     None
    158				     ; Destroy:	     None
    159				     ;------------------------------------------------------------------------------
    160	01C9			     MY_ISR_08h	     proc
    161	01C9  90				     nop
    162	01CA  90				     nop
    163	01CB  90				     nop
    164	01CC  90				     nop
    165	01CD  56				     push si			     ; save si in stack
    166	01CE  57				     push di			     ; save di in stack
    167	01CF  06				     push es			     ; save es in stack
    168	01D0  1E				     push ds			     ; save ds in stack
    169	01D1  52				     push dx			     ; save dx in stack
    170	01D2  51				     push cx			     ; save cx in stack
    171	01D3  53				     push bx			     ; save bx in stack
Turbo Assembler	 Version 4.1	    02/25/25 15:06:08	    Page 4
regframe.asm



    172	01D4  50				     push ax			     ; save ax in stack
    173
    174	01D5  0E				     push cs
    175	01D6  1F				     pop  ds			     ; ds = cs
    176
    177	01D7  80 3E 01C2r 00			     cmp  isEnabled, 0		     ; if (!isEnabled) {
    178	01DC  74 03				     je	  DontShowRegisters	     ; goto DontShowRegisters }
    179
    180	01DE  E8 0032				     call ShowRegisters		     ; Show info about registers
    181
    182	01E1			     DontShowRegisters:
    183						     ;mov  al,	20h		      ;	al = 20h
    184						     ;out  20h,	al		      ;	out to interrupt controller
    185
    186	01E1  58				     pop  ax			     ; back ax from stack
    187	01E2  5B				     pop  bx			     ; back bx from stack
    188	01E3  59				     pop  cx			     ; back cx from stack
    189	01E4  5A				     pop  dx			     ; back dx from stack
    190	01E5  1F				     pop  ds			     ; back ds from stack
    191	01E6  07				     pop  es			     ; back es from stack
    192	01E7  5F				     pop  di			     ; back di from stack
    193	01E8  5E				     pop  si			     ; back si from stack
    194
    195	01E9  EA				     db	  0eah			     ; jmp
    196	01EA  0000		     Ofs_old_08h     dw	  0			     ; offset  old ISR_08h
    197	01EC  0000		     Seg_old_08h     dw	  0			     ; segment old ISR_08h
    198	01EE  90				     nop
    199	01EF  90				     nop
    200	01F0  90				     nop
    201	01F1  90				     nop
    202	01F2  90				     nop
    203	01F3  CF				     iret			     ; interrupt return
    204	01F4			     MY_ISR_08h	     endp
    205
    206				     ;------------------------------------------------------------------------------
    207				     ; PrintRegNames func to output in screen base for showing registers status
    208				     ; Entry:	     TextReg - string of text
    209				     ; Exit:	     None
    210				     ; Destroy:	     di, es, si, ax, cx, dx
    211				     ;------------------------------------------------------------------------------
    212	01F4			     PrintRegNames   proc
    213
    214	01F4  BF B800				     mov  di, 0b800h		     ; VIDEOSEG
    215	01F7  8E C7				     mov  es, di		     ; es = videoseg
    216
    217				     ;---------------displaying	just text on the screen-----------------------------
    218
    219	01F9  BF 01C2				     mov  di, 80 * 2 * 2 + (80 - 15) * 2  ; third string + offset
    220										     ; di - start pos of text
    221
    222	01FC  BE 026Ar				     lea  si, TextReg		     ; si = start of TextReg
    223	01FF  B4 09				     mov  ah, 09h		     ; color of	text
    224
    225	0201  BA 0004				     mov  dx, 4			     ; number of registers
    226	0204			     NewRegisters:
    227	0204  B9 0003				     mov  cx, 3			     ; number of symbols in string
    228	0207			     NewChar:
Turbo Assembler	 Version 4.1	    02/25/25 15:06:08	    Page 5
regframe.asm



    229	0207  AC				     lodsb			     ; mov al, ds:[si]
    230										     ; inc si
    231	0208  AB				     stosw			     ; mov es:[di], ax && di +=	2
    232	0209  E2 FC				     loop NewChar		     ; goto NewChar}
    233
    234	020B  81 C7 009A			     add  di, (80 - 3) * 2	     ; new string
    235
    236	020F  4A				     dec  dx			     ; if (--dx	== 0) {
    237	0210  75 F2				     jne  NewRegisters		     ; goto NewRegisters }
    238
    239	0212  C3				     ret
    240	0213			     PrintRegNames   endp
    241
    242				     ;------------------------------------------------------------------------------
    243				     ; ShowRegisters Func to show information about registers
    244				     ; Entry:	     ax	- parrent value	of ax
    245				     ;		     bx	- parrent value	of bx
    246				     ;		     cx	- parrent value	of cx
    247				     ;		     dx	- parrent value	of dx
    248				     ; Exit:	     None
    249				     ; Destroy:	     si, di, es, ax, bx, cx, dx
    250				     ;------------------------------------------------------------------------------
    251	0213			     ShowRegisters   proc
    252	0213  1E				     push ds			     ; save ds in stack
    253										     ;------------------------
    254	0214  52				     push dx			     ;			     |
    255	0215  51				     push cx			     ; registers to print    |
    256	0216  53				     push bx			     ;			     |
    257	0217  50				     push ax			     ;------------------------
    258
    259	0218  0E				     push cs
    260	0219  1F				     pop  ds			     ; ds = cs
    261
    262	021A  BF B800				     mov  di, 0b800h		     ; VIDEOSEG
    263	021D  8E C7				     mov  es, di		     ; es = videoseg
    264
    265	021F  B4 09				     mov  ah, 09h		     ; color of	text
    266
    267				     ;---------------displaying	the register status on the screen-------------------
    268
    269	0221  BF 01C8				     mov  di, 80 * 2 * 2 + (80 - 12) * 2  ; third string + offset
    270	0224  B9 0004				     mov  cx, 4			     ; cx = number of registers
    271	0227			     NewRegValue:
    272	0227  5B				     pop  bx			     ; bx = value of some register
    273										     ; from stack
    274	0228  E8 0008				     call PrintHex		     ; value bx	to videoseg
    275
    276	022B  81 C7 0098			     add  di, (80 - 4) * 2	     ; new string
    277
    278	022F  E2 F6				     loop NewRegValue		     ; if (--cx) goto NewRegValue
    279
    280	0231  1F				     pop  ds			     ; back ds from stack
    281
    282	0232  C3				     ret
    283	0233			     ShowRegisters   endp
    284
    285				     ;------------------------------------------------------------------------------
Turbo Assembler	 Version 4.1	    02/25/25 15:06:08	    Page 6
regframe.asm



    286				     ; PrintHex	     Func to print to videoseg hex number
    287				     ; Entry:	     ah	- color	of print
    288				     ;		     bx	- value	to videoseg
    289				     ;		     di	- start	of print
    290				     ;		     es	- videoseg
    291				     ; Exit:	     None
    292				     ; Destroy:	     di, al
    293				     ;------------------------------------------------------------------------------
    294	0233			     PrintHex	     proc
    295				     ;-----------------------------------------
    296				     ;		     For example:     19a4    |
    297				     ;-----------------------------------------			---------------
    298
    299				     ;---------------First-number---------------------------------------------------
    300				     ;								---------------
    301	0233  8A C7				     mov  al, bh		     ; al  = bh	| ex: al = 19 |
    302				     ;								---------------
    303				     ;								---------------
    304	0235  D0 E8 D0 E8 D0 E8	D0+		     shr  al, 4			     ; al /= 16	| ex: al = 1  |
    305	      E8
    306				     ;								---------------
    307	023D  E8 001C				     call PrintOneHexNumber	     ; print hex al
    308
    309				     ;---------------Second-Number--------------------------------------------------
    310				     ;								---------------
    311	0240  8A C7				     mov  al, bh		     ; al  = bh	| ex: al = 19 |
    312				     ;								---------------
    313	0242  24 0F				     and  al, 0Fh		     ; al &= 00001111b
    314				     ;								---------------
    315				     ;								| ex: al = 9  |
    316				     ;								---------------
    317	0244  E8 0015				     call PrintOneHexNumber	     ; print hex al
    318
    319				     ;---------------Third-Number---------------------------------------------------
    320				     ;								---------------
    321	0247  8A C3				     mov  al, bl		     ; al = bl	| ex: al = a4 |
    322				     ;								---------------
    323				     ;								---------------
    324	0249  D0 E8 D0 E8 D0 E8	D0+		     shr  al, 4			     ; al /= 16	| ex: al = a  |
    325	      E8
    326				     ;								---------------
    327	0251  E8 0008				     call PrintOneHexNumber	     ; print hex al
    328
    329				     ;---------------Fourth-Number--------------------------------------------------
    330				     ;								---------------
    331	0254  8A C3				     mov  al, bl		     ; al  = bh	| ex: al = a4 |
    332				     ;								---------------
    333	0256  24 0F				     and  al, 0Fh		     ; al &= 00001111b
    334				     ;								---------------
    335				     ;								| ex: al = 4  |
    336				     ;								---------------
    337	0258  E8 0001				     call PrintOneHexNumber	     ; print hex al
    338
    339	025B  C3				     ret
    340	025C			     PrintHex	     endp
    341
    342				     ;------------------------------------------------------------------------------
Turbo Assembler	 Version 4.1	    02/25/25 15:06:08	    Page 7
regframe.asm



    343				     ; PrintOneHexNumber Func to print one hex number to screen
    344				     ; Entry:	     es	- videoseg
    345				     ;		     ah	- color
    346				     ;		     al	- hex number
    347				     ;		     di	- start	of print
    348				     ; Exit:	     di	- end of print
    349				     ; Destroy:	di
    350				     ;------------------------------------------------------------------------------
    351	025C			     PrintOneHexNumber proc
    352
    353	025C  3C 09				     cmp  al, 9			     ; if (al >	9) {
    354
    355	025E  77 06				     ja	  IsHexLetter		     ; goto IsHexLetter1 }
    356
    357	0260  04 30				     add  al, 30h		     ; ax = hex	of number
    358
    359	0262  AB				     stosw			     ; mov es:[di], ax && di +=	2
    360
    361	0263  EB 04 90				     jmp  NextNumber		     ; goto NextNumber
    362
    363	0266			     IsHexLetter:
    364	0266  04 37				     add  al, 37h		     ; hex of letter A - F in number
    365
    366	0268  AB				     stosw			     ; mov es:[di], ax && di +=	2
    367	0269			     NextNumber:
    368	0269  C3				     ret
    369	026A			     PrintOneHexNumber endp
    370
    371				     ;------------------------------------------------------------------------------
    372
    373	026A  61 78 20 62 78 20	63+  TextReg	     db	"ax bx cx dx "
    374	      78 20 64 78 20
    375
    376				     ;------------------------------------------------------------------------------
    377				     ;				     2D	Array of frame's symbols
    378				     ;			 1.1   1.2   1.3   2.1	 2.2   2.3   3.1   3.2	 3.3
    379	0276  C9 CD BB BA 00 BA	C8+  Style	     db	0c9h, 0cdh, 0bbh, 0bah,	 00h, 0bah, 0c8h, 0cdh,	0bch
    380	      CD BC
    381	027F  03 03 03 03 00 03	03+		     db	 03h,  03h,  03h,  03h,	 00h,  03h,  03h,  03h,	 03h
    382	      03 03
    383	0288  DA C4 BF B3 00 B3	C0+		     db	0dah, 0c4h, 0bfh, 0b3h,	 00h, 0b3h, 0c0h, 0c4h,	0d9h
    384	      C4 D9
    385	0291  31 32 33 34 35 36	37+		     db	"123456789"
    386	      38 39
    387	029A  DC DC DC DD 00 DE	DF+		     db	0dch, 0dch, 0dch, 0ddh,	 00h, 0deh, 0dfh, 0dfh,	0dfh
    388	      DF DF
    389	02A3  24 24 24 24 00 24	24+		     db	024h, 024h, 024h, 024h,	 00h, 024h, 024h, 024h,	024h
    390	      24 24
    391	02AC  E0 E1 E7 E1 E0 E7	E7+		     db	0e0h, 0e1h, 0e7h, 0e1h,	0e0h, 0e7h, 0e7h, 0e1h,	0e0h
    392	      E1 E0
    393	02B5  00 00 00 00 00 00	00+		     db	00h,   00h,  00h,  00h,	 00h,  00h,  00h,  00h,	 00h
    394	      00 00
    395
    396				     ; 1.1 - start  symbol of first  string
    397				     ; 1.2 - middle symbol of first  string
    398				     ; 1.3 - end    symbol of first  string
    399				     ; 2.1 - start  symbol of middle strings
Turbo Assembler	 Version 4.1	    02/25/25 15:06:08	    Page 8
regframe.asm



    400				     ; 2.2 - middle symbol of middle strings
    401				     ; 2.3 - end    symbol of middle strings
    402				     ; 3.1 - start  symbol of end    string
    403				     ; 3.2 - middle symbol of end    string
    404				     ; 3.3 - end    symbol of end    string
    405				     ;------------------------------------------------------------------------------
    406
    407				     include frame.asm
1   408				     ;------------------------------------------------------------------------------
1   409				     ;				   Frame functions
1   410				     ;------------------------------------------------------------------------------
1   411
1   412				     ;------------------------------------------------------------------------------
1   413				     ; MakeFrame     Func to make frame
1   414				     ; Entry:	     ah	    - color of frame
1   415				     ;		     si	    - ptr   of array of	the symbols for	frame
1   416				     ;		     cx	    - len   of frame
1   417				     ;		     dx	    - high  of frame
1   418				     ;		     di	    - start of print (upper left cornel)
1   419				     ; Exit:	     None
1   420				     ; Destroy:	     ax, si, cx, dx, di, es
1   421				     ;------------------------------------------------------------------------------
1   422	02BE			     MakeFrame	     proc
1   423
1   424	02BE  57				     push di			     ; save start of print in stack
1   425	02BF  BF B800				     mov  di, 0b800h		     ; VIDEOSEG
1   426	02C2  8E C7				     mov  es, di		     ; es = videoseg
1   427	02C4  5F				     pop  di			     ; back start of print
1   428
1   429	02C5  51				     push cx			     ; save cx in stack
1   430	02C6  E8 001D				     call MakeStrFrame		     ; make first string of frame
1   431	02C9  59				     pop  cx			     ; pop cx from stack
1   432	02CA  83 EA 02				     sub  dx, 2			     ; dx -= 2;	dx = number
1   433										     ; of middle strings
1   434	02CD			     MakeMiddle:
1   435	02CD  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
1   436	02D1  51				     push cx			     ; save cx
1   437	02D2  56				     push si			     ; save si
1   438	02D3  E8 0010				     call MakeStrFrame		     ; make middle string
1   439	02D6  5E				     pop si			     ; si = &(start symbol of
1   440										     ; middle strings)
1   441	02D7  59				     pop  cx			     ; cx = len	of frame
1   442	02D8  4A				     dec  dx			     ; dx--;
1   443	02D9  75 F2				     jne  MakeMiddle		     ; loop
1   444
1   445	02DB  83 C6 03				     add  si, 3			     ; si = &(start symbol of
1   446										     ; end string)
1   447	02DE  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
1   448
1   449	02E2  E8 0001				     call MakeStrFrame		     ; make end	string of frame
1   450
1   451	02E5  C3				     ret
1   452	02E6			     MakeFrame	     endp
1   453
1   454				     ;------------------------------------------------------------------------------
1   455				     ; MakeStrFrame  Func to make string of frame
1   456				     ; Entry:	     ah	    - color of string
Turbo Assembler	 Version 4.1	    02/25/25 15:06:08	    Page 9
regframe.asm



1   457				     ;		     si	    - array of symbol for string
1   458				     ;		     cx	    - len of string
1   459				     ;		     di	    - start of print string
1   460				     ;		     es	    - videoseg
1   461				     ; Exit:	     None
1   462				     ; Destroy:	     ax, cx, si
1   463				     ;------------------------------------------------------------------------------
1   464	02E6			     MakeStrFrame    proc
1   465	02E6  57				     push di			     ; save di = start of string
1   466
1   467	02E7  AC				     lodsb			     ; ax = first symbol of string
1   468										     ; mov al, ds:[si] && inc si
1   469	02E8  AB				     stosw			     ; mov es:[di], ax && di +=	2
1   470
1   471	02E9  AC				     lodsb			     ; ax = middle symbol of string
1   472										     ; mov al, ds:[si] && inc si
1   473	02EA  83 E9 02				     sub  cx, 2			     ; cx -= 2;	cx = number
1   474										     ; of middle symbols
1   475	02ED  F3> AB				     rep stosw			     ; mov es:[di], ax && di +=	2
1   476										     ; cx -= 1;	cx = 0?; make loop
1   477										     ; put all middle symbols
1   478	02EF  AC				     lodsb			     ; ax = end	symbol of string
1   479										     ; mov al, ds:[si] && inc si
1   480	02F0  AB				     stosw			     ; mov es:[di], ax && di +=	2
1   481	02F1  5F				     pop  di			     ; back di = start of string
1   482
1   483	02F2  C3				     ret
1   484	02F3			     MakeStrFrame    endp
1   485
1   486
1   487
    488
    489	02F3			     EOP:
    490				     end	     Start
Turbo Assembler	 Version 4.1	    02/25/25 15:06:08	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/25/25"
??FILENAME			  Text	 "regframe"
??TIME				  Text	 "15:06:07"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGFRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
DONTSHOWREGISTERS		  Near	 DGROUP:01E1
EOP				  Near	 DGROUP:02F3
ISENABLED			  Byte	 DGROUP:01C2
ISHEXLETTER			  Near	 DGROUP:0266
MAKEFRAME			  Near	 DGROUP:02BE
MAKEMIDDLE			  Near	 DGROUP:02CD
MAKESTRFRAME			  Near	 DGROUP:02E6
MY_ISR_08H			  Near	 DGROUP:01C9
MY_ISR_09H			  Near	 DGROUP:0157
NEWCHAR				  Near	 DGROUP:0207
NEWREGISTERS			  Near	 DGROUP:0204
NEWREGVALUE			  Near	 DGROUP:0227
NEXTNUMBER			  Near	 DGROUP:0269
NOTPRESSF			  Near	 DGROUP:018C
NOTPRESSG			  Near	 DGROUP:01AB
OFS_OLD_08H			  Word	 DGROUP:01EA
OFS_OLD_09H			  Word	 DGROUP:01BE
PRINTHEX			  Near	 DGROUP:0233
PRINTONEHEXNUMBER		  Near	 DGROUP:025C
PRINTREGNAMES			  Near	 DGROUP:01F4
SEG_OLD_08H			  Word	 DGROUP:01EC
SEG_OLD_09H			  Word	 DGROUP:01C0
SHOWREGISTERS			  Near	 DGROUP:0213
START				  Near	 DGROUP:0100
STYLE				  Byte	 DGROUP:0276
TEXTREG				  Byte	 DGROUP:026A

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  02F3 Word	  Public  CODE
