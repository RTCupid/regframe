Turbo Assembler	 Version 4.1	    02/23/25 16:35:23	    Page 1
regframe.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;				     Second Task
      3				     ;			      Frame with info about registers
      4				     ;				  "Resident Frame"
      5				     ;			       (c) 2025	Muratov	Artyom
      6				     ;------------------------------------------------------------------------------
      7
      8	0000			     .model tiny
      9	0000			     .code
     10				     org 100h
     11
     12	0100			     Start:
     13	0100  33 C0				     xor  ax, ax		     ; ax = 0
     14	0102  8E C0				     mov  es, ax		     ; es = ax
     15	0104  BB 0024				     mov  bx, 09h * 4		     ; offset for ptr to ISR_09h
     16
     17	0107  26: 8B 07				     mov  ax, es:[bx]		     ; Ofs_old_09h and Seg_old_09h
     18	010A  A3 0169r				     mov  Ofs_old_09h, ax	     ; from array with
     19	010D  26: 8B 47	02			     mov  ax, es:[bx + 2]	     ; ptrs to interrupt service
     20	0111  A3 016Br				     mov  Seg_old_09h, ax	     ; routine
     21
     22
     23	0114  CD 09				     int  09h			     ; call old	ISR 09h
     24
     25	0116  FA				     cli
     26	0117  26: C7 07	0136r			     mov  es:[bx], offset MY_ISR_09h ; offset of my interrupt 09h
     27										     ; service routiny
     28	011C  0E				     push cs
     29	011D  58				     pop  ax			     ; ax = cs
     30	011E  26: 89 47	02			     mov  es:[bx + 2], ax	     ; es:[bx +	2] = ax	(= segment
     31										     ; with code)
     32	0122  FB				     sti
     33
     34	0123  CD 09				     int  09h			     ; call old	ISR 09h
     35
     36	0125  B8 3100				     mov  ax, 3100h		     ; DOS Fn 31H: Terminate & Stay
     37										     ; Resident
     38	0128  BA 01EBr				     mov  dx, offset EOP	     ; dx = &EOP
     39	012B  D1 EA D1 EA D1 EA	D1+		     shr  dx, 4			     ; dx /= 16
     40	      EA
     41	0133  42				     inc  dx			     ; dx++
     42	0134  CD 21				     int  21h
     43
     44				     ;------------------------------------------------------------------------------
     45				     ; MY_ISR_09h - new	handler	for interrupt 09h
     46				     ; Entry:	     None
     47				     ; Exit:	     None
     48				     ; Destroy:	     None
     49				     ;------------------------------------------------------------------------------
     50	0136			     MY_ISR_09h	     proc
     51	0136  50				     push ax			     ; save ax in stack
     52	0137  51				     push cx			     ; save cx in stack
     53	0138  52				     push dx			     ; save dx in stack
     54	0139  56				     push si			     ; save si in stack
     55	013A  57				     push di			     ; save di in stack
     56	013B  06				     push es			     ; save es in stack
     57
Turbo Assembler	 Version 4.1	    02/23/25 16:35:23	    Page 2
regframe.asm



     58	013C  51				     push cx
     59	013D  5A				     pop  dx
     60
     61	013E  E4 60				     in	  al, 60h		     ; read data from PPI port
     62	0140  3C 21				     cmp  al, 21h		     ; if (al != 'Press	F1'){
     63	0142  75 14				     jne  NotPressF1		     ; goto NotPressF1 }
     64
     65	0144  B4 09				     mov  ah, 09h		     ;-----------------
     66	0146  B9 000E				     mov  cx, 14		     ;		      |
     67	0149  BA 0011				     mov  dx, 17		     ; attributes for |
     68	014C  BE 01A3r				     lea  si, Style		     ; frame	      |
     69	014F  83 C6 12				     add  si, 9	* 2		     ;		      |
     70	0152  BF 0084				     mov  di, (80 - 14)	* 2	     ;-----------------
     71	0155  E8 0016				     call MakeFrame		     ; Make frame for registers
     72
     73						     ;jmp  NotReleaseF1		     ; goto NotReleaseF1:
     74
     75	0158			     NotPressF1:
     76						     ;cmp  al, 3bh or 80h	      ;	if (al != 'Release F1'){
     77						     ;jne  NotReleaseF1:	      ;	goto NotReleaseF1: }
     78
     79						     ;mov  ah, 09h		      ;-----------------
     80						     ;mov  cx, 14		      ;		       |
     81						     ;mov  dx, 17		      ;	attributes for |
     82						     ;lea  si, Style		      ;	frame	       |
     83						     ;add  si, 9 * 7		      ;		       |
     84						     ;mov  di, (80 - 14) * 2	      ;-----------------
     85						     ;call MakeFrame		      ;	Make frame for registers
     86
     87	0158			     NotReleaseF1:
     88	0158  E4 61				     in	  al,  61h		     ; al = port 61h
     89	015A  0C 80				     or	  al,  80h		     ; al |= 10000000b
     90	015C  E6 61				     out  61h, al		     ; out to 61h PPI
     91	015E  24 7F				     and  al, not 80h		     ; al &= 01111111b
     92	0160  E6 61				     out  61h, al		     ; out to 61h PPI
     93
     94						     ;mov  al,	20h		      ;	al = 20h
     95						     ;out  20h,	al		      ;	out to interrupt controller
     96
     97	0162  07				     pop  es			     ; back es from stack
     98	0163  5F				     pop  di			     ; back di from stack
     99	0164  5E				     pop  si			     ; back si from stack
    100	0165  5A				     pop  dx			     ; back es from stack
    101	0166  59				     pop  cx			     ; back di from stack
    102	0167  58				     pop  ax			     ; back si from stack
    103
    104	0168  EA				     db	  0eah			     ; jmp
    105	0169  0000		     Ofs_old_09h     dw	  0			     ; offset
    106	016B  0000		     Seg_old_09h     dw	  0			     ; segment
    107
    108	016D  CF				     iret			     ; interrupt return
    109	016E			     MY_ISR_09h	     endp
    110
    111				     include frame.asm
1   112				     ;------------------------------------------------------------------------------
1   113				     ;				   Frame functions
1   114				     ;------------------------------------------------------------------------------
Turbo Assembler	 Version 4.1	    02/23/25 16:35:23	    Page 3
regframe.asm



1   115
1   116				     ;------------------------------------------------------------------------------
1   117				     ; MakeFrame     Func to make frame
1   118				     ; Entry:	     ah	    - color of frame
1   119				     ;		     si	    - ptr   of array of	the symbols for	frame
1   120				     ;		     cx	    - len   of frame
1   121				     ;		     dx	    - high  of frame
1   122				     ;		     di	    - start of print (upper left cornel)
1   123				     ; Exit:	     None
1   124				     ; Destroy:	     ax, si, cx, dx, di, es
1   125				     ;------------------------------------------------------------------------------
1   126	016E			     MakeFrame	     proc
1   127	016E  57				     push di			     ; save start of print in stack
1   128	016F  BF B800				     mov  di, 0b800h		     ; VIDEOSEG
1   129	0172  8E C7				     mov  es, di		     ; es = videoseg
1   130	0174  5F				     pop  di			     ; back start of print
1   131
1   132	0175  51				     push cx			     ; save cx in stack
1   133	0176  E8 001D				     call MakeStrFrame		     ; make first string of frame
1   134	0179  59				     pop  cx			     ; pop cx from stack
1   135	017A  83 EA 02				     sub  dx, 2			     ; dx -= 2;	dx = number
1   136										     ; of middle strings
1   137	017D			     MakeMiddle:
1   138	017D  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
1   139	0181  51				     push cx			     ; save cx
1   140	0182  56				     push si			     ; save si
1   141	0183  E8 0010				     call MakeStrFrame		     ; make middle string
1   142	0186  5E				     pop si			     ; si = &(start symbol of
1   143										     ; middle strings)
1   144	0187  59				     pop  cx			     ; cx = len	of frame
1   145	0188  4A				     dec  dx			     ; dx--;
1   146	0189  75 F2				     jne  MakeMiddle		     ; loop
1   147
1   148	018B  83 C6 03				     add  si, 3			     ; si = &(start symbol of
1   149										     ; end string)
1   150	018E  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
1   151
1   152	0192  E8 0001				     call MakeStrFrame		     ; make end	string of frame
1   153
1   154	0195  C3				     ret
1   155	0196			     MakeFrame	     endp
1   156
1   157				     ;------------------------------------------------------------------------------
1   158				     ; MakeStrFrame  Func to make string of frame
1   159				     ; Entry:	     ah	    - color of string
1   160				     ;		     si	    - array of symbol for string
1   161				     ;		     cx	    - len of string
1   162				     ;		     di	    - start of print string
1   163				     ;		     es	    - videoseg
1   164				     ; Exit:	     None
1   165				     ; Destroy:	     ax, cx, si
1   166				     ;------------------------------------------------------------------------------
1   167	0196			     MakeStrFrame    proc
1   168	0196  57				     push di			     ; save di = start of string
1   169
1   170	0197  AC				     lodsb			     ; ax = first symbol of string
1   171										     ; mov al, ds:[si] && inc si
Turbo Assembler	 Version 4.1	    02/23/25 16:35:23	    Page 4
regframe.asm



1   172	0198  AB				     stosw			     ; mov es:[di], ax && di +=	2
1   173
1   174	0199  AC				     lodsb			     ; ax = middle symbol of string
1   175										     ; mov al, ds:[si] && inc si
1   176	019A  83 E9 02				     sub  cx, 2			     ; cx -= 2;	cx = number
1   177										     ; of middle symbols
1   178	019D  F3> AB				     rep stosw			     ; mov es:[di], ax && di +=	2
1   179										     ; cx -= 1;	cx = 0?; make loop
1   180										     ; put all middle symbols
1   181	019F  AC				     lodsb			     ; ax = end	symbol of string
1   182										     ; mov al, ds:[si] && inc si
1   183	01A0  AB				     stosw			     ; mov es:[di], ax && di +=	2
1   184	01A1  5F				     pop  di			     ; back di = start of string
1   185
1   186	01A2  C3				     ret
1   187	01A3			     MakeStrFrame    endp
1   188
1   189
1   190
    191
    192				     ;------------------------------------------------------------------------------
    193				     ;		   2D Array of frame's symbols
    194				     ;	      1.1   1.2	  1.3	2.1   2.2   2.3	  3.1	3.2   3.3
    195	01A3  C9 CD BB BA 00 BA	C8+  Style db 0c9h, 0cdh, 0bbh,	0bah,  00h, 0bah, 0c8h,	0cdh, 0bch
    196	      CD BC
    197	01AC  03 03 03 03 00 03	03+	   db  03h,  03h,  03h,	 03h,  00h,  03h,  03h,	 03h,  03h
    198	      03 03
    199	01B5  DA C4 BF B3 00 B3	C0+	   db 0dah, 0c4h, 0bfh,	0b3h,  00h, 0b3h, 0c0h,	0c4h, 0d9h
    200	      C4 D9
    201	01BE  31 32 33 34 35 36	37+	   db "123456789"
    202	      38 39
    203	01C7  DC DC DC DD 00 DE	DF+	   db 0dch, 0dch, 0dch,	0ddh,  00h, 0deh, 0dfh,	0dfh, 0dfh
    204	      DF DF
    205	01D0  24 24 24 24 00 24	24+	   db 024h, 024h, 024h,	024h,  00h, 024h, 024h,	024h, 024h
    206	      24 24
    207	01D9  E0 E1 E7 E1 E0 E7	E7+	   db 0e0h, 0e1h, 0e7h,	0e1h, 0e0h, 0e7h, 0e7h,	0e1h, 0e0h
    208	      E1 E0
    209	01E2  00 00 00 00 00 00	00+	   db 00h,   00h,  00h,	 00h,  00h,  00h,  00h,	 00h,  00h
    210	      00 00
    211
    212				     ; 1.1 - start  symbol of first  string
    213				     ; 1.2 - middle symbol of first  string
    214				     ; 1.3 - end    symbol of first  string
    215				     ; 2.1 - start  symbol of middle strings
    216				     ; 2.2 - middle symbol of middle strings
    217				     ; 2.3 - end    symbol of middle strings
    218				     ; 3.1 - start  symbol of end    string
    219				     ; 3.2 - middle symbol of end    string
    220				     ; 3.3 - end    symbol of end    string
    221				     ;------------------------------------------------------------------------------
    222
    223	01EB			     EOP:
    224				     end	     Start
Turbo Assembler	 Version 4.1	    02/23/25 16:35:23	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/23/25"
??FILENAME			  Text	 "regframe"
??TIME				  Text	 "16:35:23"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGFRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
EOP				  Near	 DGROUP:01EB
MAKEFRAME			  Near	 DGROUP:016E
MAKEMIDDLE			  Near	 DGROUP:017D
MAKESTRFRAME			  Near	 DGROUP:0196
MY_ISR_09H			  Near	 DGROUP:0136
NOTPRESSF1			  Near	 DGROUP:0158
NOTRELEASEF1			  Near	 DGROUP:0158
OFS_OLD_09H			  Word	 DGROUP:0169
SEG_OLD_09H			  Word	 DGROUP:016B
START				  Near	 DGROUP:0100
STYLE				  Byte	 DGROUP:01A3

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  01EB Word	  Public  CODE
