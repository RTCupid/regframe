Turbo Assembler	 Version 4.1	    02/25/25 14:09:03	    Page 1
regframe.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;				     Second Task
      3				     ;			      Frame with info about registers
      4				     ;				  "Resident Frame"
      5				     ;			       (c) 2025	Muratov	Artyom
      6				     ;------------------------------------------------------------------------------
      7
      8	0000			     .model tiny
      9	0000			     .code
     10				     org 100h
     11
     12	0100			     Start:
     13				     ;---------------intercept-interrupt-09h----------------------------------------
     14	0100  33 C0				     xor  ax, ax		     ; ax = 0
     15	0102  8E C0				     mov  es, ax		     ; es = ax
     16	0104  BB 0024				     mov  bx, 09h * 4		     ; offset for ptr to ISR_09h
     17
     18	0107  26: 8B 07				     mov  ax, es:[bx]		     ; Ofs_old_09h and Seg_old_09h
     19	010A  A3 01ADr				     mov  Ofs_old_09h, ax	     ; from array with
     20	010D  26: 8B 47	02			     mov  ax, es:[bx + 2]	     ; ptrs to interrupt service
     21	0111  A3 01AFr				     mov  Seg_old_09h, ax	     ; routine
     22
     23	0114  CD 09				     int  09h			     ; call old	ISR 09h
     24
     25	0116  FA				     cli
     26	0117  26: C7 07	0157r			     mov  es:[bx], offset MY_ISR_09h ; offset of my interrupt 09h
     27										     ; service routiny
     28	011C  0E				     push cs
     29	011D  58				     pop  ax			     ; ax = cs
     30	011E  26: 89 47	02			     mov  es:[bx + 2], ax	     ; segment of my interrupt 08h
     31	0122  FB				     sti
     32
     33	0123  CD 09				     int  09h			     ; call old	ISR 09h
     34
     35				     ;---------------intercept-interrupt-08h----------------------------------------
     36
     37	0125  BB 0020				     mov  bx, 08h * 4		     ; offset for ptr to ISR_08h
     38
     39	0128  26: 8B 07				     mov  ax, es:[bx]		     ; Ofs_old_09h and Seg_old_09h
     40	012B  A3 01D1r				     mov  Ofs_old_08h, ax	     ; from array with
     41	012E  26: 8B 47	02			     mov  ax, es:[bx + 2]	     ; ptrs to interrupt service
     42	0132  A3 01D3r				     mov  Seg_old_08h, ax	     ; routine
     43
     44	0135  CD 08				     int  08h
     45
     46	0137  FA				     cli
     47	0138  26: C7 07	01B7r			     mov  es:[bx], offset MY_ISR_08h ; offset of my interrupt 08h
     48										     ; service routiny
     49	013D  0E				     push cs
     50	013E  58				     pop  ax			     ; ax = cs
     51	013F  26: 89 47	02			     mov  es:[bx + 2], ax	     ; segment of my interrupt 08h
     52	0143  FB				     sti
     53
     54	0144  CD 08				     int  08h
     55
     56				     ;---------------end-of-intercept-----------------------------------------------
     57
Turbo Assembler	 Version 4.1	    02/25/25 14:09:03	    Page 2
regframe.asm



     58	0146  B8 3100				     mov  ax, 3100h		     ; DOS Fn 31H: Terminate & Stay
     59										     ; Resident
     60	0149  BA 02D2r				     mov  dx, offset EOP	     ; dx = &EOP
     61	014C  D1 EA D1 EA D1 EA	D1+		     shr  dx, 4			     ; dx /= 16
     62	      EA
     63	0154  42				     inc  dx			     ; dx++
     64	0155  CD 21				     int  21h
     65
     66				     ;------------------------------------------------------------------------------
     67				     ; MY_ISR_09h - new	handler	for interrupt 09h
     68				     ; Entry:	     None
     69				     ; Exit:	     None
     70				     ; Destroy:	     None
     71				     ;------------------------------------------------------------------------------
     72	0157			     MY_ISR_09h	     proc
     73	0157  90				     nop
     74	0158  90				     nop
     75	0159  90				     nop
     76	015A  90				     nop
     77	015B  56				     push si			     ; save si in stack
     78	015C  57				     push di			     ; save di in stack
     79	015D  06				     push es			     ; save es in stack
     80	015E  1E				     push ds			     ; save ds in stack
     81	015F  52				     push dx			     ; save dx in stack
     82	0160  51				     push cx			     ; save cx in stack
     83	0161  53				     push bx			     ; save bx in stack
     84	0162  50				     push ax			     ; save ax in stack
     85
     86	0163  0E				     push cs
     87	0164  1F				     pop  ds			     ; ds = cs
     88
     89	0165  E4 60				     in	  al, 60h		     ; read data from PPI port
     90	0167  3C 21				     cmp  al, 21h		     ; if (al != 'Press	F'){
     91	0169  75 17				     jne  NotPressF		    ; goto NotPressF }
     92
     93	016B  B4 09				     mov  ah, 09h		     ;-----------------
     94	016D  B9 000E				     mov  cx, 14		     ;		      |
     95	0170  BA 0011				     mov  dx, 17		     ; attributes for |
     96	0173  BE 0255r				     lea  si, Style		     ; frame	      |
     97	0176  83 C6 12				     add  si, 9	* 2		     ;		      |
     98	0179  BF 007C				     mov  di, (80 - 18)	* 2	     ;-----------------
     99	017C  E8 011E				     call MakeFrame		     ; Make frame for registers
    100
    101						     ;pop  ax			      ;------------------------
    102						     ;pop  bx			      ;	return parrent value  |
    103						     ;pop  cx			      ;	of registers	      |
    104						     ;pop  dx			      ;------------------------
    105						     ;push dx			      ;------------------------
    106						     ;push cx			      ;	save ax	bx cx dx in   |
    107						     ;push bx			      ;	stack again	      |
    108						     ;push ax			      ;------------------------
    109
    110						     ;call ShowRegisters	      ;	Show info about	registers
    111
    112	017F  EB 19 90				     jmp  NotPressG		     ; goto NotPressG
    113
    114	0182			     NotPressF:
Turbo Assembler	 Version 4.1	    02/25/25 14:09:03	    Page 3
regframe.asm



    115	0182  3C 22				     cmp  al, 22h		     ; if (al != 'Press	G'){
    116	0184  75 14				     jne  NotPressG		     ; goto NotPressG }
    117
    118	0186  B4 09				     mov  ah, 09h		     ;-----------------
    119	0188  B9 000E				     mov  cx, 14		     ;		      |
    120	018B  BA 0011				     mov  dx, 17		     ; attributes for |
    121	018E  BE 0255r				     lea  si, Style		     ; frame	      |
    122	0191  83 C6 3F				     add  si, 9	* 7		     ;		      |
    123	0194  BF 007C				     mov  di, (80 - 18)	* 2	     ;-----------------
    124	0197  E8 0103				     call MakeFrame		     ; Make empty box
    125
    126	019A			     NotPressG:
    127	019A  E4 61				     in	  al,  61h		     ; al = port 61h
    128	019C  0C 80				     or	  al,  80h		     ; al |= 10000000b
    129	019E  E6 61				     out  61h, al		     ; out to 61h PPI
    130	01A0  24 7F				     and  al, not 80h		     ; al &= 01111111b
    131	01A2  E6 61				     out  61h, al		     ; out to 61h PPI
    132
    133						     ;mov  al,	20h		      ;	al = 20h
    134						     ;out  20h,	al		      ;	out to interrupt controller
    135
    136	01A4  58				     pop  ax			     ; back ax from stack
    137	01A5  5B				     pop  bx			     ; back bx from stack
    138	01A6  59				     pop  cx			     ; back cx from stack
    139	01A7  5A				     pop  dx			     ; back dx from stack
    140	01A8  1F				     pop  ds			     ; back ds from stack
    141	01A9  07				     pop  es			     ; back es from stack
    142	01AA  5F				     pop  di			     ; back di from stack
    143	01AB  5E				     pop  si			     ; back si from stack
    144
    145	01AC  EA				     db	  0eah			     ; jmp
    146	01AD  0000		     Ofs_old_09h     dw	  0			     ; offset
    147	01AF  0000		     Seg_old_09h     dw	  0			     ; segment
    148	01B1  90				     nop
    149	01B2  90				     nop
    150	01B3  90				     nop
    151	01B4  90				     nop
    152	01B5  90				     nop
    153	01B6  CF				     iret			     ; interrupt return
    154	01B7			     MY_ISR_09h	     endp
    155
    156				     ;------------------------------------------------------------------------------
    157				     ; MY_ISR_08h - new	handler	for interrupt 08h
    158				     ; Entry:	     None
    159				     ; Exit:	     None
    160				     ; Destroy:	     None
    161				     ;------------------------------------------------------------------------------
    162	01B7			     MY_ISR_08h	     proc
    163	01B7  90				     nop
    164	01B8  90				     nop
    165	01B9  90				     nop
    166	01BA  90				     nop
    167	01BB  56				     push si			     ; save si in stack
    168	01BC  57				     push di			     ; save di in stack
    169	01BD  06				     push es			     ; save es in stack
    170	01BE  1E				     push ds			     ; save ds in stack
    171	01BF  52				     push dx			     ; save dx in stack
Turbo Assembler	 Version 4.1	    02/25/25 14:09:03	    Page 4
regframe.asm



    172	01C0  51				     push cx			     ; save cx in stack
    173	01C1  53				     push bx			     ; save bx in stack
    174	01C2  50				     push ax			     ; save ax in stack
    175
    176	01C3  0E				     push cs
    177	01C4  1F				     pop  ds			     ; ds = cs
    178
    179	01C5  E8 0013				     call ShowRegisters		     ; Show info about registers
    180
    181						     ;mov  al,	20h		      ;	al = 20h
    182						     ;out  20h,	al		      ;	out to interrupt controller
    183
    184	01C8  58				     pop  ax			     ; back ax from stack
    185	01C9  5B				     pop  bx			     ; back bx from stack
    186	01CA  59				     pop  cx			     ; back cx from stack
    187	01CB  5A				     pop  dx			     ; back dx from stack
    188	01CC  1F				     pop  ds			     ; back ds from stack
    189	01CD  07				     pop  es			     ; back es from stack
    190	01CE  5F				     pop  di			     ; back di from stack
    191	01CF  5E				     pop  si			     ; back si from stack
    192
    193	01D0  EA				     db	  0eah			     ; jmp
    194	01D1  0000		     Ofs_old_08h     dw	  0			     ; offset  old ISR_08h
    195	01D3  0000		     Seg_old_08h     dw	  0			     ; segment old ISR_08h
    196	01D5  90				     nop
    197	01D6  90				     nop
    198	01D7  90				     nop
    199	01D8  90				     nop
    200	01D9  90				     nop
    201	01DA  CF				     iret			     ; interrupt return
    202	01DB			     MY_ISR_08h	     endp
    203
    204				     ;------------------------------------------------------------------------------
    205				     ; ShowRegisters Func to show information about registers
    206				     ; Entry:	     ax	- parrent value	of ax
    207				     ;		     bx	- parrent value	of bx
    208				     ;		     cx	- parrent value	of cx
    209				     ;		     dx	- parrent value	of dx
    210				     ; Exit:	     None
    211				     ; Destroy:	     si, di, es, ax, bx, cx, dx
    212				     ;------------------------------------------------------------------------------
    213	01DB			     ShowRegisters   proc
    214	01DB  1E				     push ds			     ; save ds in stack
    215										     ;------------------------
    216	01DC  52				     push dx			     ;			     |
    217	01DD  51				     push cx			     ; registers to print    |
    218	01DE  53				     push bx			     ;			     |
    219	01DF  50				     push ax			     ;------------------------
    220
    221
    222	01E0  0E				     push cs
    223	01E1  1F				     pop  ds			     ; ds = cs
    224
    225	01E2  BF B800				     mov  di, 0b800h		     ; VIDEOSEG
    226	01E5  8E C7				     mov  es, di		     ; es = videoseg
    227
    228	01E7  BF 01C2				     mov  di, 80 * 2 * 2 + (80 - 15) * 2  ; third string + offset
Turbo Assembler	 Version 4.1	    02/25/25 14:09:03	    Page 5
regframe.asm



    229										     ; di - start pos of text
    230				     ;---------------displaying	just text on the screen-----------------------------
    231
    232	01EA  BE 0249r				     lea  si, TextReg		     ; si = start of TextReg
    233	01ED  B4 09				     mov  ah, 09h		     ; color of	text
    234
    235	01EF  BA 0004				     mov  dx, 4			     ; number of registers
    236	01F2			     NewRegisters:
    237	01F2  B9 0003				     mov  cx, 3			     ; number of symbols in string
    238	01F5			     NewChar:
    239	01F5  AC				     lodsb			     ; mov al, ds:[si]
    240										     ; inc si
    241	01F6  AB				     stosw			     ; mov es:[di], ax && di +=	2
    242	01F7  E2 FC				     loop NewChar		     ; goto NewChar}
    243
    244	01F9  81 C7 009A			     add  di, (80 - 3) * 2	     ; new string
    245
    246	01FD  4A				     dec  dx			     ; if (--dx	== 0) {
    247	01FE  75 F2				     jne  NewRegisters		     ; goto NewRegisters }
    248
    249				     ;---------------displaying	the register status on the screen-------------------
    250
    251	0200  BF 01C8				     mov  di, 80 * 2 * 2 + (80 - 12) * 2  ; third string + offset
    252	0203  B9 0004				     mov  cx, 4			     ; cx = number of registers
    253	0206			     NewRegValue:
    254	0206  5B				     pop  bx			     ; bx = value of some register
    255										     ; from stack
    256	0207  E8 0008				     call PrintHex		     ; value bx	to videoseg
    257
    258	020A  81 C7 0098			     add  di, (80 - 4) * 2	     ; new string
    259
    260	020E  E2 F6				     loop NewRegValue		     ; if (--cx) goto NewRegValue
    261
    262	0210  1F				     pop  ds			     ; back ds from stack
    263
    264	0211  C3				     ret
    265	0212			     ShowRegisters   endp
    266
    267				     ;------------------------------------------------------------------------------
    268				     ; PrintHex	     Func to print to videoseg hex number
    269				     ; Entry:	     ah	- color	of print
    270				     ;		     bx	- value	to videoseg
    271				     ;		     di	- start	of print
    272				     ;		     es	- videoseg
    273				     ; Exit:	     None
    274				     ; Destroy:	     di, al
    275				     ;------------------------------------------------------------------------------
    276	0212			     PrintHex	     proc
    277				     ;-----------------------------------------
    278				     ;		     For example:     19a4    |
    279				     ;-----------------------------------------			---------------
    280
    281				     ;---------------First-number---------------------------------------------------
    282				     ;								---------------
    283	0212  8A C7				     mov  al, bh		     ; al  = bh	| ex: al = 19 |
    284				     ;								---------------
    285				     ;								---------------
Turbo Assembler	 Version 4.1	    02/25/25 14:09:03	    Page 6
regframe.asm



    286	0214  D0 E8 D0 E8 D0 E8	D0+		     shr  al, 4			     ; al /= 16	| ex: al = 1  |
    287	      E8
    288				     ;								---------------
    289	021C  E8 001C				     call PrintOneHexNumber	     ; print hex al
    290
    291				     ;---------------Second-Number--------------------------------------------------
    292				     ;								---------------
    293	021F  8A C7				     mov  al, bh		     ; al  = bh	| ex: al = 19 |
    294				     ;								---------------
    295	0221  24 0F				     and  al, 0Fh		     ; al &= 00001111b
    296				     ;								---------------
    297				     ;								| ex: al = 9  |
    298				     ;								---------------
    299	0223  E8 0015				     call PrintOneHexNumber	     ; print hex al
    300
    301				     ;---------------Third-Number---------------------------------------------------
    302				     ;								---------------
    303	0226  8A C3				     mov  al, bl		     ; al = bl	| ex: al = a4 |
    304				     ;								---------------
    305				     ;								---------------
    306	0228  D0 E8 D0 E8 D0 E8	D0+		     shr  al, 4			     ; al /= 16	| ex: al = a  |
    307	      E8
    308				     ;								---------------
    309	0230  E8 0008				     call PrintOneHexNumber	     ; print hex al
    310
    311				     ;---------------Fourth-Number--------------------------------------------------
    312				     ;								---------------
    313	0233  8A C3				     mov  al, bl		     ; al  = bh	| ex: al = a4 |
    314				     ;								---------------
    315	0235  24 0F				     and  al, 0Fh		     ; al &= 00001111b
    316				     ;								---------------
    317				     ;								| ex: al = 4  |
    318				     ;								---------------
    319	0237  E8 0001				     call PrintOneHexNumber	     ; print hex al
    320
    321	023A  C3				     ret
    322	023B			     PrintHex	     endp
    323
    324				     ;------------------------------------------------------------------------------
    325				     ; PrintOneHexNumber Func to print one hex number to screen
    326				     ; Entry:	     es	- videoseg
    327				     ;		     ah	- color
    328				     ;		     al	- hex number
    329				     ;		     di	- start	of print
    330				     ; Exit:	     di	- end of print
    331				     ; Destroy:	di
    332				     ;------------------------------------------------------------------------------
    333	023B			     PrintOneHexNumber proc
    334
    335	023B  3C 09				     cmp  al, 9			     ; if (al >	9) {
    336
    337	023D  77 06				     ja	  IsHexLetter		     ; goto IsHexLetter1 }
    338
    339	023F  04 30				     add  al, 30h		     ; ax = hex	of number
    340
    341	0241  AB				     stosw			     ; mov es:[di], ax && di +=	2
    342
Turbo Assembler	 Version 4.1	    02/25/25 14:09:03	    Page 7
regframe.asm



    343	0242  EB 04 90				     jmp  NextNumber		     ; goto NextNumber
    344
    345	0245			     IsHexLetter:
    346	0245  04 37				     add  al, 37h		     ; hex of letter A - F in number
    347
    348	0247  AB				     stosw			     ; mov es:[di], ax && di +=	2
    349	0248			     NextNumber:
    350	0248  C3				     ret
    351	0249			     PrintOneHexNumber endp
    352
    353				     ;------------------------------------------------------------------------------
    354
    355	0249  61 78 20 62 78 20	63+  TextReg	     db	"ax bx cx dx "
    356	      78 20 64 78 20
    357
    358				     ;------------------------------------------------------------------------------
    359				     ;				     2D	Array of frame's symbols
    360				     ;			 1.1   1.2   1.3   2.1	 2.2   2.3   3.1   3.2	 3.3
    361	0255  C9 CD BB BA 00 BA	C8+  Style	     db	0c9h, 0cdh, 0bbh, 0bah,	 00h, 0bah, 0c8h, 0cdh,	0bch
    362	      CD BC
    363	025E  03 03 03 03 00 03	03+		     db	 03h,  03h,  03h,  03h,	 00h,  03h,  03h,  03h,	 03h
    364	      03 03
    365	0267  DA C4 BF B3 00 B3	C0+		     db	0dah, 0c4h, 0bfh, 0b3h,	 00h, 0b3h, 0c0h, 0c4h,	0d9h
    366	      C4 D9
    367	0270  31 32 33 34 35 36	37+		     db	"123456789"
    368	      38 39
    369	0279  DC DC DC DD 00 DE	DF+		     db	0dch, 0dch, 0dch, 0ddh,	 00h, 0deh, 0dfh, 0dfh,	0dfh
    370	      DF DF
    371	0282  24 24 24 24 00 24	24+		     db	024h, 024h, 024h, 024h,	 00h, 024h, 024h, 024h,	024h
    372	      24 24
    373	028B  E0 E1 E7 E1 E0 E7	E7+		     db	0e0h, 0e1h, 0e7h, 0e1h,	0e0h, 0e7h, 0e7h, 0e1h,	0e0h
    374	      E1 E0
    375	0294  00 00 00 00 00 00	00+		     db	00h,   00h,  00h,  00h,	 00h,  00h,  00h,  00h,	 00h
    376	      00 00
    377
    378				     ; 1.1 - start  symbol of first  string
    379				     ; 1.2 - middle symbol of first  string
    380				     ; 1.3 - end    symbol of first  string
    381				     ; 2.1 - start  symbol of middle strings
    382				     ; 2.2 - middle symbol of middle strings
    383				     ; 2.3 - end    symbol of middle strings
    384				     ; 3.1 - start  symbol of end    string
    385				     ; 3.2 - middle symbol of end    string
    386				     ; 3.3 - end    symbol of end    string
    387				     ;------------------------------------------------------------------------------
    388
    389				     include frame.asm
1   390				     ;------------------------------------------------------------------------------
1   391				     ;				   Frame functions
1   392				     ;------------------------------------------------------------------------------
1   393
1   394				     ;------------------------------------------------------------------------------
1   395				     ; MakeFrame     Func to make frame
1   396				     ; Entry:	     ah	    - color of frame
1   397				     ;		     si	    - ptr   of array of	the symbols for	frame
1   398				     ;		     cx	    - len   of frame
1   399				     ;		     dx	    - high  of frame
Turbo Assembler	 Version 4.1	    02/25/25 14:09:03	    Page 8
regframe.asm



1   400				     ;		     di	    - start of print (upper left cornel)
1   401				     ; Exit:	     None
1   402				     ; Destroy:	     ax, si, cx, dx, di, es
1   403				     ;------------------------------------------------------------------------------
1   404	029D			     MakeFrame	     proc
1   405
1   406	029D  57				     push di			     ; save start of print in stack
1   407	029E  BF B800				     mov  di, 0b800h		     ; VIDEOSEG
1   408	02A1  8E C7				     mov  es, di		     ; es = videoseg
1   409	02A3  5F				     pop  di			     ; back start of print
1   410
1   411	02A4  51				     push cx			     ; save cx in stack
1   412	02A5  E8 001D				     call MakeStrFrame		     ; make first string of frame
1   413	02A8  59				     pop  cx			     ; pop cx from stack
1   414	02A9  83 EA 02				     sub  dx, 2			     ; dx -= 2;	dx = number
1   415										     ; of middle strings
1   416	02AC			     MakeMiddle:
1   417	02AC  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
1   418	02B0  51				     push cx			     ; save cx
1   419	02B1  56				     push si			     ; save si
1   420	02B2  E8 0010				     call MakeStrFrame		     ; make middle string
1   421	02B5  5E				     pop si			     ; si = &(start symbol of
1   422										     ; middle strings)
1   423	02B6  59				     pop  cx			     ; cx = len	of frame
1   424	02B7  4A				     dec  dx			     ; dx--;
1   425	02B8  75 F2				     jne  MakeMiddle		     ; loop
1   426
1   427	02BA  83 C6 03				     add  si, 3			     ; si = &(start symbol of
1   428										     ; end string)
1   429	02BD  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
1   430
1   431	02C1  E8 0001				     call MakeStrFrame		     ; make end	string of frame
1   432
1   433	02C4  C3				     ret
1   434	02C5			     MakeFrame	     endp
1   435
1   436				     ;------------------------------------------------------------------------------
1   437				     ; MakeStrFrame  Func to make string of frame
1   438				     ; Entry:	     ah	    - color of string
1   439				     ;		     si	    - array of symbol for string
1   440				     ;		     cx	    - len of string
1   441				     ;		     di	    - start of print string
1   442				     ;		     es	    - videoseg
1   443				     ; Exit:	     None
1   444				     ; Destroy:	     ax, cx, si
1   445				     ;------------------------------------------------------------------------------
1   446	02C5			     MakeStrFrame    proc
1   447	02C5  57				     push di			     ; save di = start of string
1   448
1   449	02C6  AC				     lodsb			     ; ax = first symbol of string
1   450										     ; mov al, ds:[si] && inc si
1   451	02C7  AB				     stosw			     ; mov es:[di], ax && di +=	2
1   452
1   453	02C8  AC				     lodsb			     ; ax = middle symbol of string
1   454										     ; mov al, ds:[si] && inc si
1   455	02C9  83 E9 02				     sub  cx, 2			     ; cx -= 2;	cx = number
1   456										     ; of middle symbols
Turbo Assembler	 Version 4.1	    02/25/25 14:09:03	    Page 9
regframe.asm



1   457	02CC  F3> AB				     rep stosw			     ; mov es:[di], ax && di +=	2
1   458										     ; cx -= 1;	cx = 0?; make loop
1   459										     ; put all middle symbols
1   460	02CE  AC				     lodsb			     ; ax = end	symbol of string
1   461										     ; mov al, ds:[si] && inc si
1   462	02CF  AB				     stosw			     ; mov es:[di], ax && di +=	2
1   463	02D0  5F				     pop  di			     ; back di = start of string
1   464
1   465	02D1  C3				     ret
1   466	02D2			     MakeStrFrame    endp
1   467
1   468
1   469
    470
    471	02D2			     EOP:
    472				     end	     Start
Turbo Assembler	 Version 4.1	    02/25/25 14:09:03	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/25/25"
??FILENAME			  Text	 "regframe"
??TIME				  Text	 "14:09:03"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGFRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
EOP				  Near	 DGROUP:02D2
ISHEXLETTER			  Near	 DGROUP:0245
MAKEFRAME			  Near	 DGROUP:029D
MAKEMIDDLE			  Near	 DGROUP:02AC
MAKESTRFRAME			  Near	 DGROUP:02C5
MY_ISR_08H			  Near	 DGROUP:01B7
MY_ISR_09H			  Near	 DGROUP:0157
NEWCHAR				  Near	 DGROUP:01F5
NEWREGISTERS			  Near	 DGROUP:01F2
NEWREGVALUE			  Near	 DGROUP:0206
NEXTNUMBER			  Near	 DGROUP:0248
NOTPRESSF			  Near	 DGROUP:0182
NOTPRESSG			  Near	 DGROUP:019A
OFS_OLD_08H			  Word	 DGROUP:01D1
OFS_OLD_09H			  Word	 DGROUP:01AD
PRINTHEX			  Near	 DGROUP:0212
PRINTONEHEXNUMBER		  Near	 DGROUP:023B
SEG_OLD_08H			  Word	 DGROUP:01D3
SEG_OLD_09H			  Word	 DGROUP:01AF
SHOWREGISTERS			  Near	 DGROUP:01DB
START				  Near	 DGROUP:0100
STYLE				  Byte	 DGROUP:0255
TEXTREG				  Byte	 DGROUP:0249

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  02D2 Word	  Public  CODE
