Turbo Assembler	 Version 4.1	    02/22/25 18:38:03	    Page 1
regframe.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;				     Second Task
      3				     ;			      Frame with info about registers
      4				     ;				  "Resident Frame"
      5				     ;			       (c) 2025	Muratov	Artyom
      6				     ;------------------------------------------------------------------------------
      7
      8	0000			     .model tiny
      9	0000			     .code
     10				     org 100h
     11
     12	0100			     Start:
     13	0100  33 C0				     xor  ax, ax		     ; ax = 0
     14	0102  8E C0				     mov  es, ax		     ; es = ax
     15	0104  BB 0024				     mov  bx, 09h * 4		     ;
     16
     17	0107  CD 09				     int  09h			     ; call old	keyboard handler
     18
     19	0109  FA				     cli
     20	010A  26: C7 07	0129r			     mov  es:[bx], offset MY_ISR_09h ; offset of my interrupt 09h
     21										     ; service routiny
     22	010F  0E				     push cs
     23	0110  58				     pop  ax			     ; ax = cs
     24	0111  26: 89 47	02			     mov  es:[bx + 2], ax	     ; es:[bx +	2] = ax	(= segment
     25										     ; with code)
     26	0115  FB				     sti
     27
     28	0116  CD 09				     int  09h			     ; call old	ISR 09h
     29
     30	0118  B8 3100				     mov  ax, 3100h		     ; DOS Fn 31H: Terminate & Stay
     31										     ; Resident
     32	011B  BA 014Dr				     mov  dx, offset EOP	     ; dx = &EOP
     33	011E  D1 EA D1 EA D1 EA	D1+		     shr  dx, 4			     ; dx /= 16
     34	      EA
     35	0126  42				     inc  dx			     ; dx++
     36	0127  CD 21				     int  21h
     37
     38				     ;------------------------------------------------------------------------------
     39				     ; MY_ISR_09h - new	handler	for interrupt 09h
     40				     ; Entry:	     None
     41				     ; Exit:	     None
     42				     ; Destroy:	     None
     43				     ;------------------------------------------------------------------------------
     44	0129			     MY_ISR_09h	     proc
     45	0129  50				     push ax			     ; save ax in stack
     46	012A  53				     push bx			     ; save bx in stack
     47	012B  06				     push es			     ; save es in stack
     48
     49	012C  BB B800				     mov  bx, 0b800h		     ; bx = VIDEOSEG
     50	012F  8E C3				     mov  es, bx		     ; es = VIDEOSEG
     51	0131  BB 0370				     mov  bx, 5	* 80 * 2 + 40 *	2    ; bx = offset in screen
     52	0134  B4 4E				     mov  ah, 4eh		     ; ah = color of text
     53
     54	0136  E4 60				     in	  al, 60h		     ; read data from PPI port
     55	0138  26: 89 07				     mov  es:[bx], ax		     ; al to videoseg
     56
     57	013B  E4 61				     in	  al,  61h		     ; al = port 61h
Turbo Assembler	 Version 4.1	    02/22/25 18:38:03	    Page 2
regframe.asm



     58	013D  0C 80				     or	  al,  80h		     ; al |= 10000000b
     59	013F  E6 61				     out  61h, al		     ; out to 61h PPI
     60	0141  24 7F				     and  al, not 80h		     ; al &= 01111111b
     61	0143  E6 61				     out  61h, al		     ; out to 61h PPI
     62	0145  B0 20				     mov  al,  20h		     ; al = 20h
     63	0147  E6 20				     out  20h, al		     ; out to interrupt	controller
     64
     65	0149  07				     pop  es			     ; back es from stack
     66	014A  5B				     pop  bx			     ; back bx from stack
     67	014B  58				     pop  ax			     ; back ax from stack
     68
     69	014C  CF				     iret			     ; interrupt return
     70	014D			     MY_ISR_09h	     endp
     71
     72	014D			     EOP:
     73				     end	     Start
Turbo Assembler	 Version 4.1	    02/22/25 18:38:03	    Page 3
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/22/25"
??FILENAME			  Text	 "regframe"
??TIME				  Text	 "18:38:03"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGFRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
EOP				  Near	 DGROUP:014D
MY_ISR_09H			  Near	 DGROUP:0129
START				  Near	 DGROUP:0100

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  014D Word	  Public  CODE
